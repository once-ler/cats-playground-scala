// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.eztier.clickmock.infrastructure.soap.entity

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.Foo](node)
val document = scalaxb.toXML[com.eztier.clickmock.infrastructure.soap.entity.Foo](obj, "foo", com.eztier.clickmock.infrastructure.soap.entity.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://clickcommerce.com/Extranet/WebServices",
    Some("tns") -> "http://clickcommerce.com/Extranet/WebServices",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RootEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RootEntityType] = new DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RootEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RootEntityTypeNameFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeName] = new DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeNameFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RootEntityTypeNameResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeNameResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetTypeNamesFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNames] = new DefaultComeztierclickmockinfrastructuresoapentity_GetTypeNamesFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetTypeNamesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetTypeNamesResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_EntityTypeExistsFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExists] = new DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeExistsFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_EntityTypeExistsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExistsResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeExistsResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityType] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityTypeForSourceControlFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControl] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeForSourceControlFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityTypeForSourceControlResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeForSourceControlResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityTypeReadableFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadable] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeReadableFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityTypeReadableResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeReadableResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_EntityTypeHasSubtypesFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypes] = new DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeHasSubtypesFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_EntityTypeHasSubtypesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypesResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeHasSubtypesResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SubtypesOfEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityType] = new DefaultComeztierclickmockinfrastructuresoapentity_SubtypesOfEntityTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SubtypesOfEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SubtypesOfEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SubtypeNamesOfEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityType] = new DefaultComeztierclickmockinfrastructuresoapentity_SubtypeNamesOfEntityTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SubtypeNamesOfEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SubtypeNamesOfEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityType] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteEntityTypeEtAlFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAl] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeEtAlFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteEntityTypeEtAlResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeEtAlResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_CreateNewEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityType] = new DefaultComeztierclickmockinfrastructuresoapentity_CreateNewEntityTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_CreateNewEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_CreateNewEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_CreateNewVersionOfEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityType] = new DefaultComeztierclickmockinfrastructuresoapentity_CreateNewVersionOfEntityTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_CreateNewVersionOfEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_CreateNewVersionOfEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddAttributeAndVersionTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionType] = new DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeAndVersionTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddAttributeAndVersionTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeAndVersionTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DropKeyFromAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_DropKeyFromAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DropKeyFromAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_DropKeyFromAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetAttributePropertyFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeProperty] = new DefaultComeztierclickmockinfrastructuresoapentity_SetAttributePropertyFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetAttributePropertyResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetAttributePropertyResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetAttributePropertyFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeProperty] = new DefaultComeztierclickmockinfrastructuresoapentity_GetAttributePropertyFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetAttributePropertyResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetAttributePropertyResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetKeyAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetKeyAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetKeyAttributeAndMigrateFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrate] = new DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeAndMigrateFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetKeyAttributeAndMigrateResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrateResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeAndMigrateResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_MigrateAllFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.MigrateAll] = new DefaultComeztierclickmockinfrastructuresoapentity_MigrateAllFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_MigrateAllResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_MigrateAllResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddMethod] = new DefaultComeztierclickmockinfrastructuresoapentity_AddMethodFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AddMethodResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethod] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineMethodFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineMethodResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddScriptMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethod] = new DefaultComeztierclickmockinfrastructuresoapentity_AddScriptMethodFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddScriptMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AddScriptMethodResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethod] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteMethodFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteMethodResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddEventFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddEvent] = new DefaultComeztierclickmockinfrastructuresoapentity_AddEventFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AddEventResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AddEventResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteEventFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteEvent] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteEventFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_DeleteEventResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_DeleteEventResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfType] = new DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_EntitiesOfTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfType] = new DefaultComeztierclickmockinfrastructuresoapentity_EntitiesOfTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_EntitiesOfTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_EntitiesOfTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AllEntitiesOfVersionOfTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfType] = new DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfVersionOfTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AllEntitiesOfVersionOfTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfVersionOfTypeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByID] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshot] = new DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeSnapshotFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetPORefsFromSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshot] = new DefaultComeztierclickmockinfrastructuresoapentity_GetPORefsFromSnapshotFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetPORefsFromSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetPORefsFromSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_ArrayOfStringFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString] = new DefaultComeztierclickmockinfrastructuresoapentity_ArrayOfStringFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_ReleaseSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshot] = new DefaultComeztierclickmockinfrastructuresoapentity_ReleaseSnapshotFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_ReleaseSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_ReleaseSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetXmlStringsOfOidStringsFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStrings] = new DefaultComeztierclickmockinfrastructuresoapentity_GetXmlStringsOfOidStringsFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetXmlStringsOfOidStringsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetXmlStringsOfOidStringsResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityByAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetEntityByAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_CreateEntityFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.CreateEntity] = new DefaultComeztierclickmockinfrastructuresoapentity_CreateEntityFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_CreateEntityResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_CreateEntityResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEntityByID1Format: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID1Format {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEntityByID1ResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID1ResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEntityByID2Format: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID2Format {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEntityByID2ResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID2ResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RegisterEventByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByID] = new DefaultComeztierclickmockinfrastructuresoapentity_RegisterEventByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RegisterEventByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RegisterEventByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_UnregisterEventByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByID] = new DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEventByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_UnregisterEventByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEventByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEventFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEvent] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEventFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RedefineEventResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RedefineEventResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetAttributeEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByID] = new DefaultComeztierclickmockinfrastructuresoapentity_SetAttributeEntityByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetAttributeEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetAttributeEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetAttributeEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByID] = new DefaultComeztierclickmockinfrastructuresoapentity_GetAttributeEntityByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetAttributeEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetAttributeEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetFormattedAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_SetFormattedAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetFormattedAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetFormattedAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetFormattedAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttribute] = new DefaultComeztierclickmockinfrastructuresoapentity_GetFormattedAttributeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetFormattedAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetFormattedAttributeResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RenderValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RenderValue] = new DefaultComeztierclickmockinfrastructuresoapentity_RenderValueFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_RenderValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_RenderValueResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_InterpretValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.InterpretValue] = new DefaultComeztierclickmockinfrastructuresoapentity_InterpretValueFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_InterpretValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_InterpretValueResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_TriggerEventByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByID] = new DefaultComeztierclickmockinfrastructuresoapentity_TriggerEventByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_TriggerEventByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_TriggerEventByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_InvokeInstanceMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethod] = new DefaultComeztierclickmockinfrastructuresoapentity_InvokeInstanceMethodFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_ArrayOfAnyTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType] = new DefaultComeztierclickmockinfrastructuresoapentity_ArrayOfAnyTypeFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_InvokeInstanceMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_InvokeInstanceMethodResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_InvokeTypeMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethod] = new DefaultComeztierclickmockinfrastructuresoapentity_InvokeTypeMethodFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_InvokeTypeMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_InvokeTypeMethodResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_UnregisterEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByID] = new DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEntityByIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_UnregisterEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetSupportedCurrenciesFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencies] = new DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrenciesFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetSupportedCurrenciesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrenciesResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetSupportedCurrencyFormatsFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormats] = new DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrencyFormatsFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetSupportedCurrencyFormatsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrencyFormatsResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoadJavaClassFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClass] = new DefaultComeztierclickmockinfrastructuresoapentity_LoadJavaClassFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoadJavaClassResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_LoadJavaClassResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoadAssemblyFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoadAssembly] = new DefaultComeztierclickmockinfrastructuresoapentity_LoadAssemblyFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoadAssemblyResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_LoadAssemblyResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetExtentForSCFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSC] = new DefaultComeztierclickmockinfrastructuresoapentity_GetExtentForSCFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetExtentForSCResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetExtentForSCResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetExtentFromSCFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSC] = new DefaultComeztierclickmockinfrastructuresoapentity_SetExtentFromSCFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetExtentFromSCResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetExtentFromSCResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetEntityAttributeValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValue] = new DefaultComeztierclickmockinfrastructuresoapentity_SetEntityAttributeValueFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetEntityAttributeValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetEntityAttributeValueResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetEntityTypeAttributeValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValue] = new DefaultComeztierclickmockinfrastructuresoapentity_SetEntityTypeAttributeValueFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_SetEntityTypeAttributeValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_SetEntityTypeAttributeValueResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetStorageListFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetStorageList] = new DefaultComeztierclickmockinfrastructuresoapentity_GetStorageListFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetStorageListResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetStorageListResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoginFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.Login] = new DefaultComeztierclickmockinfrastructuresoapentity_LoginFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoginResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoginResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_LoginResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoginAsWindowsIdentityFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentity] = new DefaultComeztierclickmockinfrastructuresoapentity_LoginAsWindowsIdentityFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LoginAsWindowsIdentityResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_LoginAsWindowsIdentityResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LogoffFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.Logoff] = new DefaultComeztierclickmockinfrastructuresoapentity_LogoffFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_LogoffResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_LogoffResponseFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetUserIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetUserID] = new DefaultComeztierclickmockinfrastructuresoapentity_GetUserIDFormat {}
  implicit lazy val Comeztierclickmockinfrastructuresoapentity_GetUserIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse] = new DefaultComeztierclickmockinfrastructuresoapentity_GetUserIDResponseFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("GetUserIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse](elem)))
      case (Some("LogoffResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse](elem)))
      case (Some("LoginAsWindowsIdentityResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse](elem)))
      case (Some("LoginResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoginResponse](elem)))
      case (Some("GetStorageListResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse](elem)))
      case (Some("setEntityTypeAttributeValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse](elem)))
      case (Some("setEntityAttributeValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse](elem)))
      case (Some("setExtentFromSCResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse](elem)))
      case (Some("getExtentForSCResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse](elem)))
      case (Some("loadAssemblyResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse](elem)))
      case (Some("loadJavaClassResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse](elem)))
      case (Some("getSupportedCurrencyFormatsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse](elem)))
      case (Some("getSupportedCurrenciesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse](elem)))
      case (Some("unregisterEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse](elem)))
      case (Some("invokeTypeMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse](elem)))
      case (Some("invokeInstanceMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse](elem)))
      case (Some("triggerEventByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse](elem)))
      case (Some("interpretValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse](elem)))
      case (Some("renderValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse](elem)))
      case (Some("getFormattedAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse](elem)))
      case (Some("setFormattedAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse](elem)))
      case (Some("getAttributeEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse](elem)))
      case (Some("setAttributeEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse](elem)))
      case (Some("redefineEventResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse](elem)))
      case (Some("unregisterEventByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse](elem)))
      case (Some("registerEventByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse](elem)))
      case (Some("redefineEntityByID2Response"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response](elem)))
      case (Some("redefineEntityByID1Response"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response](elem)))
      case (Some("redefineEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse](elem)))
      case (Some("createEntityResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse](elem)))
      case (Some("getEntityByAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse](elem)))
      case (Some("getXmlStringsOfOidStringsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse](elem)))
      case (Some("releaseSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse](elem)))
      case (Some("getPORefsFromSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse](elem)))
      case (Some("allEntitiesOfTypeSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse](elem)))
      case (Some("getEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse](elem)))
      case (Some("allEntitiesOfVersionOfTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse](elem)))
      case (Some("entitiesOfTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse](elem)))
      case (Some("allEntitiesOfTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse](elem)))
      case (Some("deleteEventResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse](elem)))
      case (Some("addEventResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse](elem)))
      case (Some("deleteMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse](elem)))
      case (Some("addScriptMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse](elem)))
      case (Some("redefineMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse](elem)))
      case (Some("addMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse](elem)))
      case (Some("migrateAllResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse](elem)))
      case (Some("setKeyAttributeAndMigrateResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrateResponse](elem)))
      case (Some("setKeyAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeResponse](elem)))
      case (Some("redefineAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse](elem)))
      case (Some("getAttributePropertyResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse](elem)))
      case (Some("setAttributePropertyResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse](elem)))
      case (Some("dropKeyFromAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse](elem)))
      case (Some("deleteAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse](elem)))
      case (Some("addAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse](elem)))
      case (Some("addAttributeAndVersionTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse](elem)))
      case (Some("createNewVersionOfEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse](elem)))
      case (Some("createNewEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse](elem)))
      case (Some("deleteEntityTypeEtAlResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse](elem)))
      case (Some("deleteEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeResponse](elem)))
      case (Some("subtypeNamesOfEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse](elem)))
      case (Some("subtypesOfEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse](elem)))
      case (Some("entityTypeHasSubtypesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypesResponse](elem)))
      case (Some("getEntityTypeReadableResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse](elem)))
      case (Some("getEntityTypeForSourceControlResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse](elem)))
      case (Some("getEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse](elem)))
      case (Some("entityTypeExistsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExistsResponse](elem)))
      case (Some("getTypeNamesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse](elem)))
      case (Some("rootEntityTypeNameResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse](elem)))
      case (Some("rootEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse](elem)))
      case (Some("rootEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RootEntityType](elem)))
      case (Some("rootEntityTypeName"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeName](elem)))
      case (Some("getTypeNames"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNames](elem)))
      case (Some("entityTypeExists"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExists](elem)))
      case (Some("getEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityType](elem)))
      case (Some("getEntityTypeForSourceControl"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControl](elem)))
      case (Some("getEntityTypeReadable"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadable](elem)))
      case (Some("entityTypeHasSubtypes"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypes](elem)))
      case (Some("subtypesOfEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityType](elem)))
      case (Some("subtypeNamesOfEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityType](elem)))
      case (Some("deleteEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityType](elem)))
      case (Some("deleteEntityTypeEtAl"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAl](elem)))
      case (Some("createNewEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityType](elem)))
      case (Some("createNewVersionOfEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityType](elem)))
      case (Some("addAttributeAndVersionType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionType](elem)))
      case (Some("addAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddAttribute](elem)))
      case (Some("deleteAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttribute](elem)))
      case (Some("dropKeyFromAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttribute](elem)))
      case (Some("setAttributeProperty"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeProperty](elem)))
      case (Some("getAttributeProperty"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeProperty](elem)))
      case (Some("redefineAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttribute](elem)))
      case (Some("setKeyAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttribute](elem)))
      case (Some("setKeyAttributeAndMigrate"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrate](elem)))
      case (Some("migrateAll"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.MigrateAll](elem)))
      case (Some("addMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddMethod](elem)))
      case (Some("redefineMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethod](elem)))
      case (Some("addScriptMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethod](elem)))
      case (Some("deleteMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethod](elem)))
      case (Some("addEvent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddEvent](elem)))
      case (Some("deleteEvent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEvent](elem)))
      case (Some("allEntitiesOfType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfType](elem)))
      case (Some("entitiesOfType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfType](elem)))
      case (Some("allEntitiesOfVersionOfType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfType](elem)))
      case (Some("getEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByID](elem)))
      case (Some("allEntitiesOfTypeSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshot](elem)))
      case (Some("getPORefsFromSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshot](elem)))
      case (Some("releaseSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshot](elem)))
      case (Some("getXmlStringsOfOidStrings"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStrings](elem)))
      case (Some("getEntityByAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttribute](elem)))
      case (Some("createEntity"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateEntity](elem)))
      case (Some("redefineEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID](elem)))
      case (Some("redefineEntityByID1"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1](elem)))
      case (Some("redefineEntityByID2"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2](elem)))
      case (Some("registerEventByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByID](elem)))
      case (Some("unregisterEventByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByID](elem)))
      case (Some("redefineEvent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEvent](elem)))
      case (Some("setAttributeEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByID](elem)))
      case (Some("getAttributeEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByID](elem)))
      case (Some("setFormattedAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttribute](elem)))
      case (Some("getFormattedAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttribute](elem)))
      case (Some("renderValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.RenderValue](elem)))
      case (Some("interpretValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.InterpretValue](elem)))
      case (Some("triggerEventByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByID](elem)))
      case (Some("invokeInstanceMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethod](elem)))
      case (Some("invokeTypeMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethod](elem)))
      case (Some("unregisterEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByID](elem)))
      case (Some("getSupportedCurrencies"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencies](elem)))
      case (Some("getSupportedCurrencyFormats"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormats](elem)))
      case (Some("loadJavaClass"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClass](elem)))
      case (Some("loadAssembly"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoadAssembly](elem)))
      case (Some("getExtentForSC"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSC](elem)))
      case (Some("setExtentFromSC"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSC](elem)))
      case (Some("setEntityAttributeValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValue](elem)))
      case (Some("setEntityTypeAttributeValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValue](elem)))
      case (Some("GetStorageList"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetStorageList](elem)))
      case (Some("Login"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.Login](elem)))
      case (Some("LoginAsWindowsIdentity"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentity](elem)))
      case (Some("Logoff"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.Logoff](elem)))
      case (Some("GetUserID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetUserID](elem)))

      case _ => None
    }


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RootEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RootEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.rootEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeNameFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeName] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeName] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeName(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeName, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RootEntityTypeNameResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityTypeNameResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.rootEntityTypeNameResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootEntityTypeNameResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetTypeNamesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNames] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNames] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetTypeNames(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetTypeNames, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetTypeNamesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeNamesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeNamesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeNamesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeExistsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExists] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExists] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExists(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExists, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeExistsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExistsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExistsResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeExistsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExistsResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExistsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.entityTypeExistsResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeExistsResult"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeForSourceControlFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControl] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControl] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControl(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControl, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeForSourceControlResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeForSourceControlResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeForSourceControlResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeForSourceControlResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeReadableFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadable] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadable] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "readable")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.readable, Some("http://clickcommerce.com/Extranet/WebServices"), Some("readable"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityTypeReadableResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeReadableResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeReadableResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeReadableResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeHasSubtypesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypes] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypes] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypes(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_EntityTypeHasSubtypesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypesResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeHasSubtypesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypesResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.entityTypeHasSubtypesResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeHasSubtypesResult"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SubtypesOfEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SubtypesOfEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "subtypesOfEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.subtypesOfEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("subtypesOfEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SubtypeNamesOfEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SubtypeNamesOfEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "subtypeNamesOfEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.subtypeNamesOfEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("subtypeNamesOfEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.deleteEntityTypeResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteEntityTypeResult"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeEtAlFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAl] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAl] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAl(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAl, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteEntityTypeEtAlResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_CreateNewEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_CreateNewEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createNewEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createNewEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createNewEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_CreateNewVersionOfEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateEntities")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateEntities, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateEntities"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_CreateNewVersionOfEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createNewVersionOfEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createNewVersionOfEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createNewVersionOfEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeAndVersionTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeAndVersionTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addAttributeAndVersionTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addAttributeAndVersionTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addAttributeAndVersionTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DropKeyFromAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attrName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "dropUniqueKeys")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.attrName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attrName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.dropUniqueKeys, Some("http://clickcommerce.com/Extranet/WebServices"), Some("dropUniqueKeys"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DropKeyFromAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "dropKeyFromAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dropKeyFromAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("dropKeyFromAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetAttributePropertyFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeProperty] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeProperty] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "propertyName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetAttributeProperty(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetAttributeProperty, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.propertyName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("propertyName"), __scope, false) } getOrElse {Nil},
        __obj.xmlValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetAttributePropertyResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributePropertyResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.setAttributePropertyResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAttributePropertyResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetAttributePropertyFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeProperty] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeProperty] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "propertyName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetAttributeProperty(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetAttributeProperty, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.propertyName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("propertyName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetAttributePropertyResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributePropertyResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getAttributePropertyResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getAttributePropertyResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attrName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "isKey")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attrName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attrName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.isKey, Some("http://clickcommerce.com/Extranet/WebServices"), Some("isKey"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.setKeyAttributeResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setKeyAttributeResult"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeAndMigrateFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrate] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrate] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attrName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "isKey")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrate(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attrName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attrName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.isKey, Some("http://clickcommerce.com/Extranet/WebServices"), Some("isKey"), __scope, false),
        scalaxb.toXML[Boolean](__obj.migrate, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrate"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetKeyAttributeAndMigrateResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrateResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrateResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttributeAndMigrateResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrateResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrateResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.setKeyAttributeAndMigrateResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setKeyAttributeAndMigrateResult"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_MigrateAllFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.MigrateAll] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.MigrateAll] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateSubtypes")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.MigrateAll(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.MigrateAll, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateSubtypes, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateSubtypes"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_MigrateAllResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddScriptMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "scriptLanguage")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodBody")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.scriptLanguage map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("scriptLanguage"), __scope, false) } getOrElse {Nil},
        __obj.methodBody map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodBody"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddScriptMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addScriptMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addScriptMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addScriptMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddEventFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddEvent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddEvent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddEvent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AddEventResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addEventResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addEventResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addEventResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteEventFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEvent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEvent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteEvent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_DeleteEventResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEventResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteEventResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteEventResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.allEntitiesOfTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("allEntitiesOfTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_EntitiesOfTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_EntitiesOfTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitiesOfTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.entitiesOfTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitiesOfTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfVersionOfTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "versionId")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.versionId, Some("http://clickcommerce.com/Extranet/WebServices"), Some("versionId"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfVersionOfTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfVersionOfTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.allEntitiesOfVersionOfTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("allEntitiesOfVersionOfTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_AllEntitiesOfTypeSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfTypeSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.allEntitiesOfTypeSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("allEntitiesOfTypeSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetPORefsFromSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "snapshotID")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "start")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "end")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.snapshotID map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("snapshotID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.start, Some("http://clickcommerce.com/Extranet/WebServices"), Some("start"), __scope, false),
        scalaxb.toXML[Int](__obj.end, Some("http://clickcommerce.com/Extranet/WebServices"), Some("end"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetPORefsFromSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getPORefsFromSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse(p1.headOption map { scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getPORefsFromSnapshotResult map { scalaxb.toXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getPORefsFromSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_ArrayOfStringFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    override def typeName: Option[String] = Some("ArrayOfString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString] =
      phrase(safeRep(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "string")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString(p1 map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }}) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.string flatMap { scalaxb.toXML[Option[String]](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("string"), __scope, false) })

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_ReleaseSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "snapshotID")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.snapshotID map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("snapshotID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_ReleaseSnapshotResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetXmlStringsOfOidStringsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStrings] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStrings] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStrings")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStrings(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStrings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStrings map { scalaxb.toXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStrings"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetXmlStringsOfOidStringsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getXmlStringsOfOidStringsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse(p1.headOption map { scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getXmlStringsOfOidStringsResult map { scalaxb.toXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getXmlStringsOfOidStringsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetEntityByAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityByAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityByAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_CreateEntityFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.CreateEntity] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.CreateEntity] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.CreateEntity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.CreateEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_CreateEntityResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createEntityResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createEntityResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createEntityResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID1Format extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID1ResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID1Result")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEntityByID1Result map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEntityByID1Result"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID2Format extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEntityByID2ResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID2Result")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEntityByID2Result map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEntityByID2Result"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RegisterEventByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sourcePORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "targetPORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.sourcePORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sourcePORefStr"), __scope, false) } getOrElse {Nil},
        __obj.targetPORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("targetPORefStr"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RegisterEventByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "registerEventByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.registerEventByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("registerEventByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEventByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sourcePORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "targetPORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.sourcePORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sourcePORefStr"), __scope, false) } getOrElse {Nil},
        __obj.targetPORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("targetPORefStr"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEventByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterEventByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.unregisterEventByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("unregisterEventByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEventFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEvent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEvent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEvent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RedefineEventResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEventResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEventResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEventResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetAttributeEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlAttributeValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlAttributeValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlAttributeValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetAttributeEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributeEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.setAttributeEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAttributeEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetAttributeEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetAttributeEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributeEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getAttributeEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getAttributeEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetFormattedAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "formattedString")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.formattedString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("formattedString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetFormattedAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setFormattedAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.setFormattedAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setFormattedAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetFormattedAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetFormattedAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getFormattedAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getFormattedAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getFormattedAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RenderValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RenderValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RenderValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.RenderValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RenderValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_RenderValueResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "renderValueResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.renderValueResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("renderValueResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_InterpretValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.InterpretValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.InterpretValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "valueString")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.InterpretValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.InterpretValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("valueString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_InterpretValueResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "interpretValueResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.interpretValueResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("interpretValueResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_TriggerEventByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_TriggerEventByIDResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_InvokeInstanceMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "args")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil},
        __obj.args map { scalaxb.toXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("args"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_ArrayOfAnyTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    override def typeName: Option[String] = Some("ArrayOfAnyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType] =
      phrase(safeRep(any(_ => true)) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType(p1 map { scalaxb.fromXML[scalaxb.DataRecord[Option[Any]]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.anyType flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Option[Any]]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_InvokeInstanceMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse] =
      phrase(opt(any(_ => true)) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse(p1.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.invokeInstanceMethodResult map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_InvokeTypeMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "args")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil},
        __obj.args map { scalaxb.toXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("args"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_InvokeTypeMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse] =
      phrase(opt(any(_ => true)) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse(p1.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.invokeTypeMethodResult map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_UnregisterEntityByIDResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrenciesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencies] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencies] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencies(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencies, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrenciesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrenciesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSupportedCurrenciesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSupportedCurrenciesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrencyFormatsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormats] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormats] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormats(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormats, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetSupportedCurrencyFormatsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrencyFormatsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSupportedCurrencyFormatsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSupportedCurrencyFormatsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoadJavaClassFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClass] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClass] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "javaClassName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binaryClassData")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binaryClassDataLength")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "javaSource")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootPathName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replaceClassPath")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "resetStoreCache")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClass(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClass, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.javaClassName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("javaClassName"), __scope, false) } getOrElse {Nil},
        __obj.binaryClassData map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binaryClassData"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.binaryClassDataLength, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binaryClassDataLength"), __scope, false),
        __obj.javaSource map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("javaSource"), __scope, false) } getOrElse {Nil},
        __obj.rootPathName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootPathName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replaceClassPath, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replaceClassPath"), __scope, false),
        scalaxb.toXML[Boolean](__obj.resetStoreCache, Some("http://clickcommerce.com/Extranet/WebServices"), Some("resetStoreCache"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoadJavaClassResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoadAssemblyFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.LoadAssembly] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.LoadAssembly] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyData")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyDataLength")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyPath")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replace")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "resetStoreCache")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.eztier.clickmock.infrastructure.soap.entity.LoadAssembly(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LoadAssembly, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.assemblyName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyName"), __scope, false) } getOrElse {Nil},
        __obj.assemblyData map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyData"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.assemblyDataLength, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyDataLength"), __scope, false),
        __obj.assemblyPath map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyPath"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replace, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replace"), __scope, false),
        scalaxb.toXML[Boolean](__obj.resetStoreCache, Some("http://clickcommerce.com/Extranet/WebServices"), Some("resetStoreCache"), __scope, false))

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoadAssemblyResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetExtentForSCFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSC] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSC] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSC(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSC, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetExtentForSCResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getExtentForSCResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getExtentForSCResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getExtentForSCResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetExtentFromSCFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSC] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSC] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xml")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSC(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSC, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xml map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xml"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetExtentFromSCResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetEntityAttributeValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "val")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRef"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.valValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("val"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetEntityAttributeValueResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetEntityTypeAttributeValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "val")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.valValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("val"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_SetEntityTypeAttributeValueResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetStorageListFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.GetStorageList] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.GetStorageList] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.GetStorageList] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.GetStorageList())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetStorageList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetStorageListResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "GetStorageListResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse(p1.headOption map { scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetStorageListResult map { scalaxb.toXML[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("GetStorageListResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoginFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.Login] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.Login] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "storeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "userName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "password")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.infrastructure.soap.entity.Login(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.Login, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.storeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("storeName"), __scope, false) } getOrElse {Nil},
        __obj.userName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("userName"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("password"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoginResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.LoginResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.LoginResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "LoginResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.LoginResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LoginResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LoginResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("LoginResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoginAsWindowsIdentityFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentity] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentity] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "storeName")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.storeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("storeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LoginAsWindowsIdentityResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "LoginAsWindowsIdentityResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LoginAsWindowsIdentityResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("LoginAsWindowsIdentityResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LogoffFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.Logoff] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.Logoff] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.Logoff(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.Logoff, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_LogoffResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetUserIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetUserID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetUserID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetUserID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetUserID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmockinfrastructuresoapentity_GetUserIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "GetUserIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetUserIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("GetUserIDResult"), __scope, false) } getOrElse {Nil})

  }


  trait EntityServicesSoap12Bindings { this: scalaxb.SoapClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    lazy val service: com.eztier.clickmock.infrastructure.soap.entity.EntityServicesSoap = new EntityServicesSoap12Binding {}
    def baseAddress = new java.net.URI("http://rsnirbwcdcdvm01.nyumc.org/ClickXWebServices/EntityManager/EntityServices.asmx")

    trait EntityServicesSoap12Binding extends com.eztier.clickmock.infrastructure.soap.entity.EntityServicesSoap {
      import scalaxb.ElemName._
      def rootEntityType(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RootEntityType(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/rootEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "rootEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def rootEntityTypeName(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeName(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityTypeName", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/rootEntityTypeName"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RootEntityTypeNameResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "rootEntityTypeNameResponse").head, Nil) }, {
              case x => x
            })
      def getTypeNames(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetTypeNames(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeNames", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeNames"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetTypeNamesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeNamesResponse").head, Nil) }, {
              case x => x
            })
      def entityTypeExists(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExists(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeExists", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/entityTypeExists"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeExistsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "entityTypeExistsResponse").head, Nil).entityTypeExistsResult }, {
              case x => x
            })
      def getEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeForSourceControl(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControl(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeForSourceControl", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeForSourceControl"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeForSourceControlResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeForSourceControlResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeReadable(svcSessionToken: Option[String], entityTypeName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadable(svcSessionToken, entityTypeName, readable), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeReadable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeReadable"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityTypeReadableResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeReadableResponse").head, Nil) }, {
              case x => x
            })
      def entityTypeHasSubtypes(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypes(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeHasSubtypes", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/entityTypeHasSubtypes"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntityTypeHasSubtypesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "entityTypeHasSubtypesResponse").head, Nil).entityTypeHasSubtypesResult }, {
              case x => x
            })
      def subtypesOfEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "subtypesOfEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/subtypesOfEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SubtypesOfEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "subtypesOfEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def subtypeNamesOfEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "subtypeNamesOfEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/subtypeNamesOfEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SubtypeNamesOfEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "subtypeNamesOfEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def deleteEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEntityTypeResponse").head, Nil).deleteEntityTypeResult }, {
              case x => x
            })
      def deleteEntityTypeEtAl(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAl(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEntityTypeEtAl", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEntityTypeEtAl"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEntityTypeEtAlResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEntityTypeEtAlResponse").head, Nil) }, {
              case x => x
            })
      def createNewEntityType(svcSessionToken: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityType(svcSessionToken, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateNewEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def createNewVersionOfEntityType(svcSessionToken: Option[String], xmlString: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityType(svcSessionToken, xmlString, migrateEntities), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewVersionOfEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewVersionOfEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateNewVersionOfEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewVersionOfEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def addAttributeAndVersionType(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionType(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "addAttributeAndVersionType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addAttributeAndVersionType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeAndVersionTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addAttributeAndVersionTypeResponse").head, Nil) }, {
              case x => x
            })
      def addAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AddAttribute(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "addAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addAttributeResponse").head, Nil) }, {
              case x => x
            })
      def deleteAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.DeleteAttribute(svcSessionToken, entityTypeName, attributeName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteAttributeResponse").head, Nil) }, {
              case x => x
            })
      def dropKeyFromAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attrName: Option[String], dropUniqueKeys: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttribute(svcSessionToken, entityTypeName, attrName, dropUniqueKeys), Some("http://clickcommerce.com/Extranet/WebServices"), "dropKeyFromAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/dropKeyFromAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.DropKeyFromAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "dropKeyFromAttributeResponse").head, Nil) }, {
              case x => x
            })
      def setAttributeProperty(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], propertyName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetAttributeProperty(svcSessionToken, typeName, attributeName, propertyName, xmlValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributeProperty", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setAttributeProperty"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetAttributePropertyResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setAttributePropertyResponse").head, Nil) }, {
              case x => x
            })
      def getAttributeProperty(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], propertyName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetAttributeProperty(svcSessionToken, typeName, attributeName, propertyName), Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributeProperty", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getAttributeProperty"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetAttributePropertyResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getAttributePropertyResponse").head, Nil) }, {
              case x => x
            })
      def redefineAttribute(svcSessionToken: Option[String], typeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RedefineAttribute(svcSessionToken, typeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineAttributeResponse").head, Nil) }, {
              case x => x
            })
      def setKeyAttribute(svcSessionToken: Option[String], typeName: Option[String], attrName: Option[String], isKey: Boolean)(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttribute(svcSessionToken, typeName, attrName, isKey), Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setKeyAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setKeyAttributeResponse").head, Nil).setKeyAttributeResult }, {
              case x => x
            })
      def setKeyAttributeAndMigrate(svcSessionToken: Option[String], typeName: Option[String], attrName: Option[String], isKey: Boolean, migrate: Boolean)(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrate(svcSessionToken, typeName, attrName, isKey, migrate), Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttributeAndMigrate", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setKeyAttributeAndMigrate"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetKeyAttributeAndMigrateResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setKeyAttributeAndMigrateResponse").head, Nil).setKeyAttributeAndMigrateResult }, {
              case x => x
            })
      def migrateAll(svcSessionToken: Option[String], typeName: Option[String], migrateSubtypes: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.MigrateAll(svcSessionToken, typeName, migrateSubtypes), Some("http://clickcommerce.com/Extranet/WebServices"), "migrateAll", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/migrateAll"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.MigrateAllResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "migrateAllResponse").head, Nil) }, {
              case x => x
            })
      def addMethod(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AddMethod(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "addMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addMethodResponse").head, Nil) }, {
              case x => x
            })
      def redefineMethod(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RedefineMethod(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineMethodResponse").head, Nil) }, {
              case x => x
            })
      def addScriptMethod(svcSessionToken: Option[String], entityTypeName: Option[String], scriptLanguage: Option[String], methodBody: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethod(svcSessionToken, entityTypeName, scriptLanguage, methodBody), Some("http://clickcommerce.com/Extranet/WebServices"), "addScriptMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addScriptMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddScriptMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addScriptMethodResponse").head, Nil) }, {
              case x => x
            })
      def deleteMethod(svcSessionToken: Option[String], entityTypeName: Option[String], methodName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.DeleteMethod(svcSessionToken, entityTypeName, methodName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteMethodResponse").head, Nil) }, {
              case x => x
            })
      def addEvent(svcSessionToken: Option[String], entityTypeName: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AddEvent(svcSessionToken, entityTypeName, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "addEvent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addEvent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AddEventResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addEventResponse").head, Nil) }, {
              case x => x
            })
      def deleteEvent(svcSessionToken: Option[String], entityTypeName: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.DeleteEvent(svcSessionToken, entityTypeName, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEvent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEvent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.DeleteEventResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEventResponse").head, Nil) }, {
              case x => x
            })
      def allEntitiesOfType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/allEntitiesOfType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "allEntitiesOfTypeResponse").head, Nil) }, {
              case x => x
            })
      def entitiesOfType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "entitiesOfType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/entitiesOfType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.EntitiesOfTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "entitiesOfTypeResponse").head, Nil) }, {
              case x => x
            })
      def allEntitiesOfVersionOfType(svcSessionToken: Option[String], entityTypeName: Option[String], versionId: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfType(svcSessionToken, entityTypeName, versionId), Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfVersionOfType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/allEntitiesOfVersionOfType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfVersionOfTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "allEntitiesOfVersionOfTypeResponse").head, Nil) }, {
              case x => x
            })
      def getEntityByID(svcSessionToken: Option[String], poRefStr: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetEntityByID(svcSessionToken, poRefStr), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def allEntitiesOfTypeSnapshot(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshot(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfTypeSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/allEntitiesOfTypeSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.AllEntitiesOfTypeSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "allEntitiesOfTypeSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getPORefsFromSnapshot(svcSessionToken: Option[String], snapshotID: Option[String], start: Int, end: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshot(svcSessionToken, snapshotID, start, end), Some("http://clickcommerce.com/Extranet/WebServices"), "getPORefsFromSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getPORefsFromSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetPORefsFromSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getPORefsFromSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def releaseSnapshot(svcSessionToken: Option[String], snapshotID: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshot(svcSessionToken, snapshotID), Some("http://clickcommerce.com/Extranet/WebServices"), "releaseSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/releaseSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.ReleaseSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "releaseSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getXmlStringsOfOidStrings(svcSessionToken: Option[String], poRefStrings: Option[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfString])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStrings(svcSessionToken, poRefStrings), Some("http://clickcommerce.com/Extranet/WebServices"), "getXmlStringsOfOidStrings", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getXmlStringsOfOidStrings"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetXmlStringsOfOidStringsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getXmlStringsOfOidStringsResponse").head, Nil) }, {
              case x => x
            })
      def getEntityByAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attributeName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttribute(svcSessionToken, entityTypeName, attributeName, xmlValue), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityByAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetEntityByAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityByAttributeResponse").head, Nil) }, {
              case x => x
            })
      def createEntity(svcSessionToken: Option[String], entityTypeName: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.CreateEntity(svcSessionToken, entityTypeName, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "createEntity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createEntity"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.CreateEntityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createEntityResponse").head, Nil) }, {
              case x => x
            })
      def redefineEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID(svcSessionToken, poRefStr, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def redefineEntityByID1(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1(svcSessionToken, poRefStr, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID1", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEntityByID1"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID1Response](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEntityByID1Response").head, Nil) }, {
              case x => x
            })
      def redefineEntityByID2(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2(svcSessionToken, poRefStr, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID2", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEntityByID2"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEntityByID2Response](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEntityByID2Response").head, Nil) }, {
              case x => x
            })
      def registerEventByID(svcSessionToken: Option[String], sourcePORefStr: Option[String], targetPORefStr: Option[String], eventName: Option[String], methodName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByID(svcSessionToken, sourcePORefStr, targetPORefStr, eventName, methodName), Some("http://clickcommerce.com/Extranet/WebServices"), "registerEventByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/registerEventByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RegisterEventByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "registerEventByIDResponse").head, Nil) }, {
              case x => x
            })
      def unregisterEventByID(svcSessionToken: Option[String], sourcePORefStr: Option[String], targetPORefStr: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByID(svcSessionToken, sourcePORefStr, targetPORefStr, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterEventByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/unregisterEventByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEventByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "unregisterEventByIDResponse").head, Nil) }, {
              case x => x
            })
      def redefineEvent(svcSessionToken: Option[String], typeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RedefineEvent(svcSessionToken, typeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEvent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEvent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RedefineEventResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEventResponse").head, Nil) }, {
              case x => x
            })
      def setAttributeEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], xmlAttributeValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByID(svcSessionToken, poRefStr, attributeName, xmlAttributeValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributeEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setAttributeEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetAttributeEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setAttributeEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def getAttributeEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByID(svcSessionToken, poRefStr, attributeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributeEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getAttributeEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetAttributeEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getAttributeEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def setFormattedAttribute(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], formattedString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttribute(svcSessionToken, poRefStr, attributeName, formattedString), Some("http://clickcommerce.com/Extranet/WebServices"), "setFormattedAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setFormattedAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetFormattedAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setFormattedAttributeResponse").head, Nil) }, {
              case x => x
            })
      def getFormattedAttribute(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttribute(svcSessionToken, poRefStr, attributeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getFormattedAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getFormattedAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetFormattedAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getFormattedAttributeResponse").head, Nil) }, {
              case x => x
            })
      def renderValue(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.RenderValue(svcSessionToken, poRefStr, attributeName, xmlValue), Some("http://clickcommerce.com/Extranet/WebServices"), "renderValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/renderValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.RenderValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "renderValueResponse").head, Nil) }, {
              case x => x
            })
      def interpretValue(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], valueString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.InterpretValue(svcSessionToken, poRefStr, attributeName, valueString), Some("http://clickcommerce.com/Extranet/WebServices"), "interpretValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/interpretValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.InterpretValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "interpretValueResponse").head, Nil) }, {
              case x => x
            })
      def triggerEventByID(svcSessionToken: Option[String], poRefStr: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByID(svcSessionToken, poRefStr, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "triggerEventByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/triggerEventByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.TriggerEventByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "triggerEventByIDResponse").head, Nil) }, {
              case x => x
            })
      def invokeInstanceMethod(svcSessionToken: Option[String], poRefStr: Option[String], methodName: Option[String], args: Option[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethod(svcSessionToken, poRefStr, methodName, args), Some("http://clickcommerce.com/Extranet/WebServices"), "invokeInstanceMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/invokeInstanceMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.InvokeInstanceMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "invokeInstanceMethodResponse").head, Nil) }, {
              case x => x
            })
      def invokeTypeMethod(svcSessionToken: Option[String], entityTypeName: Option[String], methodName: Option[String], args: Option[com.eztier.clickmock.infrastructure.soap.entity.ArrayOfAnyType])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethod(svcSessionToken, entityTypeName, methodName, args), Some("http://clickcommerce.com/Extranet/WebServices"), "invokeTypeMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/invokeTypeMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.InvokeTypeMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "invokeTypeMethodResponse").head, Nil) }, {
              case x => x
            })
      def unregisterEntityByID(svcSessionToken: Option[String], poRefStr: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByID(svcSessionToken, poRefStr), Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/unregisterEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.UnregisterEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "unregisterEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def getSupportedCurrencies(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencies(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrencies", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSupportedCurrencies"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrenciesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSupportedCurrenciesResponse").head, Nil) }, {
              case x => x
            })
      def getSupportedCurrencyFormats(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormats(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrencyFormats", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSupportedCurrencyFormats"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetSupportedCurrencyFormatsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSupportedCurrencyFormatsResponse").head, Nil) }, {
              case x => x
            })
      def loadJavaClass(svcSessionToken: Option[String], javaClassName: Option[String], binaryClassData: Option[String], binaryClassDataLength: Int, javaSource: Option[String], rootPathName: Option[String], replaceClassPath: Boolean, resetStoreCache: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClass(svcSessionToken, javaClassName, binaryClassData, binaryClassDataLength, javaSource, rootPathName, replaceClassPath, resetStoreCache), Some("http://clickcommerce.com/Extranet/WebServices"), "loadJavaClass", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/loadJavaClass"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoadJavaClassResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "loadJavaClassResponse").head, Nil) }, {
              case x => x
            })
      def loadAssembly(svcSessionToken: Option[String], assemblyName: Option[String], assemblyData: Option[String], assemblyDataLength: Int, assemblyPath: Option[String], replace: Boolean, resetStoreCache: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.LoadAssembly(svcSessionToken, assemblyName, assemblyData, assemblyDataLength, assemblyPath, replace, resetStoreCache), Some("http://clickcommerce.com/Extranet/WebServices"), "loadAssembly", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/loadAssembly"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoadAssemblyResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "loadAssemblyResponse").head, Nil) }, {
              case x => x
            })
      def getExtentForSC(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSC(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getExtentForSC", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getExtentForSC"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetExtentForSCResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getExtentForSCResponse").head, Nil) }, {
              case x => x
            })
      def setExtentFromSC(svcSessionToken: Option[String], entityTypeName: Option[String], xml: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSC(svcSessionToken, entityTypeName, xml), Some("http://clickcommerce.com/Extranet/WebServices"), "setExtentFromSC", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setExtentFromSC"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetExtentFromSCResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setExtentFromSCResponse").head, Nil) }, {
              case x => x
            })
      def setEntityAttributeValue(svcSessionToken: Option[String], poRef: Option[String], attributeName: Option[String], valValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValue(svcSessionToken, poRef, attributeName, valValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntityAttributeValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntityAttributeValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetEntityAttributeValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntityAttributeValueResponse").head, Nil) }, {
              case x => x
            })
      def setEntityTypeAttributeValue(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], valValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValue(svcSessionToken, typeName, attributeName, valValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntityTypeAttributeValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntityTypeAttributeValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.SetEntityTypeAttributeValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntityTypeAttributeValueResponse").head, Nil) }, {
              case x => x
            })
      def getStorageList()(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetStorageList(), Some("http://clickcommerce.com/Extranet/WebServices"), "GetStorageList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetStorageList"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetStorageListResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetStorageListResponse").head, Nil) }, {
              case x => x
            })
      def login(storeName: Option[String], userName: Option[String], password: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.LoginResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.Login(storeName, userName, password), Some("http://clickcommerce.com/Extranet/WebServices"), "Login", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Login"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoginResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginResponse").head, Nil) }, {
              case x => x
            })
      def loginAsWindowsIdentity(storeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentity(storeName), Some("http://clickcommerce.com/Extranet/WebServices"), "LoginAsWindowsIdentity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/LoginAsWindowsIdentity"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.LoginAsWindowsIdentityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginAsWindowsIdentityResponse").head, Nil) }, {
              case x => x
            })
      def logoff(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.Logoff(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "Logoff", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Logoff"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.LogoffResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LogoffResponse").head, Nil) }, {
              case x => x
            })
      def getUserID(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.infrastructure.soap.entity.GetUserID(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "GetUserID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetUserID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.infrastructure.soap.entity.GetUserIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetUserIDResponse").head, Nil) }, {
              case x => x
            })
    }
  }



}

