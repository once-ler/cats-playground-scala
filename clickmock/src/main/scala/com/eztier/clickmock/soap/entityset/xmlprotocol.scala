// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.eztier.clickmock.soap.entityset

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[com.eztier.clickmock.soap.entityset.Foo](node)
val document = scalaxb.toXML[com.eztier.clickmock.soap.entityset.Foo](obj, "foo", com.eztier.clickmock.soap.entityset.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://clickcommerce.com/Extranet/WebServices",
    Some("tns") -> "http://clickcommerce.com/Extranet/WebServices",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Comeztierclickmocksoapentityset_CreateNewETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateNewEType] = new DefaultComeztierclickmocksoapentityset_CreateNewETypeFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateNewETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateNewETypeResponse] = new DefaultComeztierclickmocksoapentityset_CreateNewETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateNewETypeExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateNewETypeEx] = new DefaultComeztierclickmocksoapentityset_CreateNewETypeExFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateNewETypeExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse] = new DefaultComeztierclickmocksoapentityset_CreateNewETypeExResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateETypeForEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateETypeForEntityType] = new DefaultComeztierclickmocksoapentityset_CreateETypeForEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateETypeForEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse] = new DefaultComeztierclickmocksoapentityset_CreateETypeForEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_VersionETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.VersionEType] = new DefaultComeztierclickmocksoapentityset_VersionETypeFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_VersionETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.VersionETypeResponse] = new DefaultComeztierclickmocksoapentityset_VersionETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateOrUpdateETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateEType] = new DefaultComeztierclickmocksoapentityset_CreateOrUpdateETypeFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateOrUpdateETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse] = new DefaultComeztierclickmocksoapentityset_CreateOrUpdateETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_HasETypeNamedFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.HasETypeNamed] = new DefaultComeztierclickmocksoapentityset_HasETypeNamedFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_HasETypeNamedResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.HasETypeNamedResponse] = new DefaultComeztierclickmocksoapentityset_HasETypeNamedResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetETypesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetETypes] = new DefaultComeztierclickmocksoapentityset_GetETypesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetETypesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetETypesResponse] = new DefaultComeztierclickmocksoapentityset_GetETypesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetETypeInformationForGUIFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUI] = new DefaultComeztierclickmocksoapentityset_GetETypeInformationForGUIFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetETypeInformationForGUIResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse] = new DefaultComeztierclickmocksoapentityset_GetETypeInformationForGUIResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetSubTypeInformationForGUIFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUI] = new DefaultComeztierclickmocksoapentityset_GetSubTypeInformationForGUIFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetSubTypeInformationForGUIResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse] = new DefaultComeztierclickmocksoapentityset_GetSubTypeInformationForGUIResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueryInformationForGUIFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUI] = new DefaultComeztierclickmocksoapentityset_GetEQueryInformationForGUIFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueryInformationForGUIResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse] = new DefaultComeztierclickmocksoapentityset_GetEQueryInformationForGUIResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RenameETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RenameEType] = new DefaultComeztierclickmocksoapentityset_RenameETypeFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RenameETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RenameETypeResponse] = new DefaultComeztierclickmocksoapentityset_RenameETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_DeleteETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.DeleteEType] = new DefaultComeztierclickmocksoapentityset_DeleteETypeFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_DeleteETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.DeleteETypeResponse] = new DefaultComeztierclickmocksoapentityset_DeleteETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetNamesOfReferencedTypesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypes] = new DefaultComeztierclickmocksoapentityset_GetNamesOfReferencedTypesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetNamesOfReferencedTypesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse] = new DefaultComeztierclickmocksoapentityset_GetNamesOfReferencedTypesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateEQuery] = new DefaultComeztierclickmocksoapentityset_CreateEQueryFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateEQueryResponse] = new DefaultComeztierclickmocksoapentityset_CreateEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateParameterizedEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateParameterizedEQuery] = new DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateParameterizedEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse] = new DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateParameterizedEQueryExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryEx] = new DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryExFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateParameterizedEQueryExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse] = new DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryExResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AlterEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AlterEQuery] = new DefaultComeztierclickmocksoapentityset_AlterEQueryFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AlterEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AlterEQueryResponse] = new DefaultComeztierclickmocksoapentityset_AlterEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AlterEQueryExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AlterEQueryEx] = new DefaultComeztierclickmocksoapentityset_AlterEQueryExFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AlterEQueryExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AlterEQueryExResponse] = new DefaultComeztierclickmocksoapentityset_AlterEQueryExResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateOrUpdateEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQuery] = new DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateOrUpdateEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse] = new DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateOrUpdateEQueryExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryEx] = new DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryExFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_CreateOrUpdateEQueryExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse] = new DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryExResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_HasEQueryNamedFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.HasEQueryNamed] = new DefaultComeztierclickmocksoapentityset_HasEQueryNamedFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_HasEQueryNamedResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.HasEQueryNamedResponse] = new DefaultComeztierclickmocksoapentityset_HasEQueryNamedResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueries] = new DefaultComeztierclickmocksoapentityset_GetEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueriesResponse] = new DefaultComeztierclickmocksoapentityset_GetEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AddExplicitMembersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AddExplicitMembers] = new DefaultComeztierclickmocksoapentityset_AddExplicitMembersFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AddExplicitMembersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse] = new DefaultComeztierclickmocksoapentityset_AddExplicitMembersResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RemoveExplicitMembersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveExplicitMembers] = new DefaultComeztierclickmocksoapentityset_RemoveExplicitMembersFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RemoveExplicitMembersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse] = new DefaultComeztierclickmocksoapentityset_RemoveExplicitMembersResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetExplicitMembersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetExplicitMembers] = new DefaultComeztierclickmocksoapentityset_GetExplicitMembersFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetExplicitMembersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse] = new DefaultComeztierclickmocksoapentityset_GetExplicitMembersResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueryParametersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueryParameters] = new DefaultComeztierclickmocksoapentityset_GetEQueryParametersFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueryParametersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse] = new DefaultComeztierclickmocksoapentityset_GetEQueryParametersResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RenameEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RenameEQuery] = new DefaultComeztierclickmocksoapentityset_RenameEQueryFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RenameEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RenameEQueryResponse] = new DefaultComeztierclickmocksoapentityset_RenameEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_DependentEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.DependentEQueries] = new DefaultComeztierclickmocksoapentityset_DependentEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_DependentEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.DependentEQueriesResponse] = new DefaultComeztierclickmocksoapentityset_DependentEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_DeleteEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.DeleteEQuery] = new DefaultComeztierclickmocksoapentityset_DeleteEQueryFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_DeleteEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.DeleteEQueryResponse] = new DefaultComeztierclickmocksoapentityset_DeleteEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateEQuery] = new DefaultComeztierclickmocksoapentityset_EvaluateEQueryFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse] = new DefaultComeztierclickmocksoapentityset_EvaluateEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateEQuerySnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshot] = new DefaultComeztierclickmocksoapentityset_EvaluateEQuerySnapshotFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateEQuerySnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse] = new DefaultComeztierclickmocksoapentityset_EvaluateEQuerySnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetDescriptionFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetDescription] = new DefaultComeztierclickmocksoapentityset_GetDescriptionFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetDescriptionResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetDescriptionResponse] = new DefaultComeztierclickmocksoapentityset_GetDescriptionResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_SetDescriptionFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetDescription] = new DefaultComeztierclickmocksoapentityset_SetDescriptionFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_SetDescriptionResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetDescriptionResponse] = new DefaultComeztierclickmocksoapentityset_SetDescriptionResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetElements] = new DefaultComeztierclickmocksoapentityset_GetElementsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetElementsResponse] = new DefaultComeztierclickmocksoapentityset_GetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetElementsSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetElementsSnapshot] = new DefaultComeztierclickmocksoapentityset_GetElementsSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetElementsSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse] = new DefaultComeztierclickmocksoapentityset_GetElementsSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetSharedValuesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetSharedValues] = new DefaultComeztierclickmocksoapentityset_GetSharedValuesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetSharedValuesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetSharedValuesResponse] = new DefaultComeztierclickmocksoapentityset_GetSharedValuesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetDetailsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetDetails] = new DefaultComeztierclickmocksoapentityset_GetDetailsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetDetailsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetDetailsResponse] = new DefaultComeztierclickmocksoapentityset_GetDetailsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetDetailsReadableFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetDetailsReadable] = new DefaultComeztierclickmocksoapentityset_GetDetailsReadableFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetDetailsReadableResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse] = new DefaultComeztierclickmocksoapentityset_GetDetailsReadableResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetTypeCompatibleSetsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSets] = new DefaultComeztierclickmocksoapentityset_GetTypeCompatibleSetsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetTypeCompatibleSetsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse] = new DefaultComeztierclickmocksoapentityset_GetTypeCompatibleSetsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetTypeCompatibleEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueries] = new DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetTypeCompatibleEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse] = new DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetBaseTypeCompatibleEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueries] = new DefaultComeztierclickmocksoapentityset_GetBaseTypeCompatibleEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetBaseTypeCompatibleEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse] = new DefaultComeztierclickmocksoapentityset_GetBaseTypeCompatibleEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetTypeCompatibleEQueriesContainingFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContaining] = new DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesContainingFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetTypeCompatibleEQueriesContainingResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse] = new DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesContainingResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetESetsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetESets] = new DefaultComeztierclickmocksoapentityset_GetESetsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetESetsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetESetsResponse] = new DefaultComeztierclickmocksoapentityset_GetESetsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateSetAlgebraFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebra] = new DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateSetAlgebraResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse] = new DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateSetAlgebraSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshot] = new DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_EvaluateSetAlgebraSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse] = new DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueryReferencesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueryReferences] = new DefaultComeztierclickmocksoapentityset_GetEQueryReferencesFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEQueryReferencesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse] = new DefaultComeztierclickmocksoapentityset_GetEQueryReferencesResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AddEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AddEntitySetElements] = new DefaultComeztierclickmocksoapentityset_AddEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_AddEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse] = new DefaultComeztierclickmocksoapentityset_AddEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RemoveEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveEntitySetElements] = new DefaultComeztierclickmocksoapentityset_RemoveEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RemoveEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse] = new DefaultComeztierclickmocksoapentityset_RemoveEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RemoveAllEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElements] = new DefaultComeztierclickmocksoapentityset_RemoveAllEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_RemoveAllEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse] = new DefaultComeztierclickmocksoapentityset_RemoveAllEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetElements] = new DefaultComeztierclickmocksoapentityset_GetEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse] = new DefaultComeztierclickmocksoapentityset_GetEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetElementsSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshot] = new DefaultComeztierclickmocksoapentityset_GetEntitySetElementsSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetElementsSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse] = new DefaultComeztierclickmocksoapentityset_GetEntitySetElementsSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_SetEntitySetUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeys] = new DefaultComeztierclickmocksoapentityset_SetEntitySetUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_SetEntitySetUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse] = new DefaultComeztierclickmocksoapentityset_SetEntitySetUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeys] = new DefaultComeztierclickmocksoapentityset_GetEntitySetUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse] = new DefaultComeztierclickmocksoapentityset_GetEntitySetUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetType] = new DefaultComeztierclickmocksoapentityset_GetEntitySetTypeFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntitySetTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse] = new DefaultComeztierclickmocksoapentityset_GetEntitySetTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_SetEntityTypeExtentUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeys] = new DefaultComeztierclickmocksoapentityset_SetEntityTypeExtentUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_SetEntityTypeExtentUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse] = new DefaultComeztierclickmocksoapentityset_SetEntityTypeExtentUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeys] = new DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse] = new DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysReadableFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadable] = new DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysReadableFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysReadableResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse] = new DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysReadableResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_UnregisterAllFromEntityTypeExtentFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtent] = new DefaultComeztierclickmocksoapentityset_UnregisterAllFromEntityTypeExtentFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_UnregisterAllFromEntityTypeExtentResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse] = new DefaultComeztierclickmocksoapentityset_UnregisterAllFromEntityTypeExtentResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetStorageListFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetStorageList] = new DefaultComeztierclickmocksoapentityset_GetStorageListFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetStorageListResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetStorageListResponse] = new DefaultComeztierclickmocksoapentityset_GetStorageListResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_ArrayOfStringFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.ArrayOfString] = new DefaultComeztierclickmocksoapentityset_ArrayOfStringFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_LoginFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.Login] = new DefaultComeztierclickmocksoapentityset_LoginFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_LoginResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.LoginResponse] = new DefaultComeztierclickmocksoapentityset_LoginResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_LoginAsWindowsIdentityFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentity] = new DefaultComeztierclickmocksoapentityset_LoginAsWindowsIdentityFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_LoginAsWindowsIdentityResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse] = new DefaultComeztierclickmocksoapentityset_LoginAsWindowsIdentityResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_LogoffFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.Logoff] = new DefaultComeztierclickmocksoapentityset_LogoffFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_LogoffResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.LogoffResponse] = new DefaultComeztierclickmocksoapentityset_LogoffResponseFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetUserIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetUserID] = new DefaultComeztierclickmocksoapentityset_GetUserIDFormat {}
  implicit lazy val Comeztierclickmocksoapentityset_GetUserIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetUserIDResponse] = new DefaultComeztierclickmocksoapentityset_GetUserIDResponseFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("GetUserIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetUserIDResponse](elem)))
      case (Some("LogoffResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.LogoffResponse](elem)))
      case (Some("LoginAsWindowsIdentityResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse](elem)))
      case (Some("LoginResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.LoginResponse](elem)))
      case (Some("GetStorageListResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetStorageListResponse](elem)))
      case (Some("unregisterAllFromEntityTypeExtentResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse](elem)))
      case (Some("getEntityTypeExtentUniqueKeysReadableResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse](elem)))
      case (Some("getEntityTypeExtentUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse](elem)))
      case (Some("setEntityTypeExtentUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse](elem)))
      case (Some("getEntitySetTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse](elem)))
      case (Some("getEntitySetUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse](elem)))
      case (Some("setEntitySetUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse](elem)))
      case (Some("getEntitySetElementsSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse](elem)))
      case (Some("getEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse](elem)))
      case (Some("removeAllEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse](elem)))
      case (Some("removeEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse](elem)))
      case (Some("addEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse](elem)))
      case (Some("getEQueryReferencesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse](elem)))
      case (Some("evaluateSetAlgebraSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse](elem)))
      case (Some("evaluateSetAlgebraResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse](elem)))
      case (Some("getESetsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetESetsResponse](elem)))
      case (Some("getTypeCompatibleEQueriesContainingResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse](elem)))
      case (Some("getBaseTypeCompatibleEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse](elem)))
      case (Some("getTypeCompatibleEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse](elem)))
      case (Some("getTypeCompatibleSetsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse](elem)))
      case (Some("getDetailsReadableResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse](elem)))
      case (Some("getDetailsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetDetailsResponse](elem)))
      case (Some("getSharedValuesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetSharedValuesResponse](elem)))
      case (Some("getElementsSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse](elem)))
      case (Some("getElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetElementsResponse](elem)))
      case (Some("setDescriptionResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.SetDescriptionResponse](elem)))
      case (Some("getDescriptionResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetDescriptionResponse](elem)))
      case (Some("evaluateEQuerySnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse](elem)))
      case (Some("evaluateEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse](elem)))
      case (Some("deleteEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.DeleteEQueryResponse](elem)))
      case (Some("dependentEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.DependentEQueriesResponse](elem)))
      case (Some("renameEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RenameEQueryResponse](elem)))
      case (Some("getEQueryParametersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse](elem)))
      case (Some("getExplicitMembersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse](elem)))
      case (Some("removeExplicitMembersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse](elem)))
      case (Some("addExplicitMembersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse](elem)))
      case (Some("getEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueriesResponse](elem)))
      case (Some("hasEQueryNamedResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.HasEQueryNamedResponse](elem)))
      case (Some("createOrUpdateEQueryExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse](elem)))
      case (Some("createOrUpdateEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse](elem)))
      case (Some("alterEQueryExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AlterEQueryExResponse](elem)))
      case (Some("alterEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AlterEQueryResponse](elem)))
      case (Some("createParameterizedEQueryExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse](elem)))
      case (Some("createParameterizedEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse](elem)))
      case (Some("createEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateEQueryResponse](elem)))
      case (Some("getNamesOfReferencedTypesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse](elem)))
      case (Some("deleteETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.DeleteETypeResponse](elem)))
      case (Some("renameETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RenameETypeResponse](elem)))
      case (Some("getEQueryInformationForGUIResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse](elem)))
      case (Some("getSubTypeInformationForGUIResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse](elem)))
      case (Some("getETypeInformationForGUIResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse](elem)))
      case (Some("getETypesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetETypesResponse](elem)))
      case (Some("hasETypeNamedResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.HasETypeNamedResponse](elem)))
      case (Some("createOrUpdateETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse](elem)))
      case (Some("versionETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.VersionETypeResponse](elem)))
      case (Some("createETypeForEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse](elem)))
      case (Some("createNewETypeExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse](elem)))
      case (Some("createNewETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateNewETypeResponse](elem)))
      case (Some("createNewEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateNewEType](elem)))
      case (Some("createNewETypeEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateNewETypeEx](elem)))
      case (Some("createETypeForEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateETypeForEntityType](elem)))
      case (Some("versionEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.VersionEType](elem)))
      case (Some("createOrUpdateEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateEType](elem)))
      case (Some("hasETypeNamed"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.HasETypeNamed](elem)))
      case (Some("getETypes"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetETypes](elem)))
      case (Some("getETypeInformationForGUI"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUI](elem)))
      case (Some("getSubTypeInformationForGUI"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUI](elem)))
      case (Some("getEQueryInformationForGUI"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUI](elem)))
      case (Some("renameEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RenameEType](elem)))
      case (Some("deleteEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.DeleteEType](elem)))
      case (Some("getNamesOfReferencedTypes"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypes](elem)))
      case (Some("createEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateEQuery](elem)))
      case (Some("createParameterizedEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateParameterizedEQuery](elem)))
      case (Some("createParameterizedEQueryEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryEx](elem)))
      case (Some("alterEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AlterEQuery](elem)))
      case (Some("alterEQueryEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AlterEQueryEx](elem)))
      case (Some("createOrUpdateEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQuery](elem)))
      case (Some("createOrUpdateEQueryEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryEx](elem)))
      case (Some("hasEQueryNamed"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.HasEQueryNamed](elem)))
      case (Some("getEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueries](elem)))
      case (Some("addExplicitMembers"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AddExplicitMembers](elem)))
      case (Some("removeExplicitMembers"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RemoveExplicitMembers](elem)))
      case (Some("getExplicitMembers"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetExplicitMembers](elem)))
      case (Some("getEQueryParameters"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueryParameters](elem)))
      case (Some("renameEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RenameEQuery](elem)))
      case (Some("dependentEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.DependentEQueries](elem)))
      case (Some("deleteEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.DeleteEQuery](elem)))
      case (Some("evaluateEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateEQuery](elem)))
      case (Some("evaluateEQuerySnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshot](elem)))
      case (Some("getDescription"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetDescription](elem)))
      case (Some("setDescription"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.SetDescription](elem)))
      case (Some("getElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetElements](elem)))
      case (Some("getElementsSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetElementsSnapshot](elem)))
      case (Some("getSharedValues"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetSharedValues](elem)))
      case (Some("getDetails"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetDetails](elem)))
      case (Some("getDetailsReadable"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetDetailsReadable](elem)))
      case (Some("getTypeCompatibleSets"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSets](elem)))
      case (Some("getTypeCompatibleEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueries](elem)))
      case (Some("getBaseTypeCompatibleEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueries](elem)))
      case (Some("getTypeCompatibleEQueriesContaining"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContaining](elem)))
      case (Some("getESets"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetESets](elem)))
      case (Some("evaluateSetAlgebra"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebra](elem)))
      case (Some("evaluateSetAlgebraSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshot](elem)))
      case (Some("getEQueryReferences"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEQueryReferences](elem)))
      case (Some("addEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.AddEntitySetElements](elem)))
      case (Some("removeEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RemoveEntitySetElements](elem)))
      case (Some("removeAllEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElements](elem)))
      case (Some("getEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetElements](elem)))
      case (Some("getEntitySetElementsSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshot](elem)))
      case (Some("setEntitySetUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeys](elem)))
      case (Some("getEntitySetUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeys](elem)))
      case (Some("getEntitySetType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetType](elem)))
      case (Some("setEntityTypeExtentUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeys](elem)))
      case (Some("getEntityTypeExtentUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeys](elem)))
      case (Some("getEntityTypeExtentUniqueKeysReadable"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadable](elem)))
      case (Some("unregisterAllFromEntityTypeExtent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtent](elem)))
      case (Some("GetStorageList"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetStorageList](elem)))
      case (Some("Login"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.Login](elem)))
      case (Some("LoginAsWindowsIdentity"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentity](elem)))
      case (Some("Logoff"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.Logoff](elem)))
      case (Some("GetUserID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.entityset.GetUserID](elem)))

      case _ => None
    }


  }

  trait DefaultComeztierclickmocksoapentityset_CreateNewETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateNewEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateNewEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.CreateNewEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateNewEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_CreateNewETypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateNewETypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.CreateNewETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.CreateNewETypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.CreateNewETypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateNewETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_CreateNewETypeExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateNewETypeEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateNewETypeEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "useKeyInformation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.CreateNewETypeEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateNewETypeEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.useKeyInformation, Some("http://clickcommerce.com/Extranet/WebServices"), Some("useKeyInformation"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_CreateNewETypeExResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_CreateETypeForEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateETypeForEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateETypeForEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.CreateETypeForEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateETypeForEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_CreateETypeForEntityTypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_VersionETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.VersionEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.VersionEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateEntities")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.VersionEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.VersionEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateEntities, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateEntities"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_VersionETypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.VersionETypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.VersionETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.VersionETypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.VersionETypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.VersionETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_CreateOrUpdateETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateOrUpdateEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateOrUpdateEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateEntities")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.CreateOrUpdateEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateOrUpdateEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateEntities, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateEntities"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_CreateOrUpdateETypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateETypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createOrUpdateETypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createOrUpdateETypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_HasETypeNamedFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.HasETypeNamed] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.HasETypeNamed] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.HasETypeNamed(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.HasETypeNamed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_HasETypeNamedResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.HasETypeNamedResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.HasETypeNamedResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "hasETypeNamedResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.HasETypeNamedResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.HasETypeNamedResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.hasETypeNamedResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("hasETypeNamedResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetETypesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetETypes] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetETypes] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetETypes(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetETypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetETypesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetETypesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetETypesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getETypesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetETypesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetETypesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getETypesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getETypesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetETypeInformationForGUIFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUI] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUI] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetETypeInformationForGUI(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetETypeInformationForGUI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetETypeInformationForGUIResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getETypeInformationForGUIResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getETypeInformationForGUIResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getETypeInformationForGUIResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetSubTypeInformationForGUIFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUI] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUI] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootType")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUI(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.rootType map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetSubTypeInformationForGUIResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSubTypeInformationForGUIResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSubTypeInformationForGUIResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSubTypeInformationForGUIResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueryInformationForGUIFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUI] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUI] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUI(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueryInformationForGUIResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryInformationForGUIResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueryInformationForGUIResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueryInformationForGUIResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_RenameETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.RenameEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.RenameEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "newETypeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.RenameEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RenameEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        __obj.newETypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("newETypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_RenameETypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RenameETypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.RenameETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.RenameETypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.RenameETypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RenameETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_DeleteETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.DeleteEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.DeleteEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteSubtypes")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.DeleteEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.DeleteEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.deleteSubtypes, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteSubtypes"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_DeleteETypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.DeleteETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.DeleteETypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteETypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.DeleteETypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.DeleteETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteETypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteETypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetNamesOfReferencedTypesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypes] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypes] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypes(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetNamesOfReferencedTypesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getNamesOfReferencedTypesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getNamesOfReferencedTypesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getNamesOfReferencedTypesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_CreateEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.CreateEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_CreateEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.CreateEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.CreateEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.CreateEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateParameterizedEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateParameterizedEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "baseTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "paramName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.CreateParameterizedEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateParameterizedEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.baseTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("baseTypeName"), __scope, false) } getOrElse {Nil},
        __obj.paramName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("paramName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "baseTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "paramName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "visibilityFlags")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.baseTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("baseTypeName"), __scope, false) } getOrElse {Nil},
        __obj.paramName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("paramName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.visibilityFlags, Some("http://clickcommerce.com/Extranet/WebServices"), Some("visibilityFlags"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_CreateParameterizedEQueryExResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createParameterizedEQueryExResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createParameterizedEQueryExResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createParameterizedEQueryExResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_AlterEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.AlterEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.AlterEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.AlterEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AlterEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_AlterEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AlterEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.AlterEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.AlterEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.AlterEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AlterEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_AlterEQueryExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.AlterEQueryEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.AlterEQueryEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replace")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.entityset.AlterEQueryEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AlterEQueryEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replace, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replace"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_AlterEQueryExResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AlterEQueryExResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.AlterEQueryExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.AlterEQueryExResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.AlterEQueryExResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AlterEQueryExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.CreateOrUpdateEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateOrUpdateEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replace")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replace, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replace"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_CreateOrUpdateEQueryExResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_HasEQueryNamedFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.HasEQueryNamed] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.HasEQueryNamed] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.HasEQueryNamed(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.HasEQueryNamed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_HasEQueryNamedResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.HasEQueryNamedResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.HasEQueryNamedResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "hasEQueryNamedResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.HasEQueryNamedResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.HasEQueryNamedResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.hasEQueryNamedResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("hasEQueryNamedResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_AddExplicitMembersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.AddExplicitMembers] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.AddExplicitMembers] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "explicitMembers")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.AddExplicitMembers(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AddExplicitMembers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.explicitMembers map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("explicitMembers"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_AddExplicitMembersResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_RemoveExplicitMembersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.RemoveExplicitMembers] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.RemoveExplicitMembers] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "explicitMembers")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.RemoveExplicitMembers(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RemoveExplicitMembers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.explicitMembers map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("explicitMembers"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_RemoveExplicitMembersResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetExplicitMembersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetExplicitMembers] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetExplicitMembers] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetExplicitMembers(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetExplicitMembers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetExplicitMembersResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getExplicitMembersResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getExplicitMembersResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getExplicitMembersResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueryParametersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueryParameters] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueryParameters] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.GetEQueryParameters(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueryParameters, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueryParametersResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryParametersResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueryParametersResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueryParametersResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_RenameEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.RenameEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.RenameEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "newEQueryName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.RenameEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RenameEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.newEQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("newEQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_RenameEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RenameEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.RenameEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.RenameEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.RenameEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RenameEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_DependentEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.DependentEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.DependentEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.DependentEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.DependentEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_DependentEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.DependentEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.DependentEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "dependentEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.DependentEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.DependentEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dependentEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("dependentEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_DeleteEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.DeleteEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.DeleteEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.DeleteEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.DeleteEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_DeleteEQueryResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.DeleteEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.DeleteEQueryResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEQueryResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.DeleteEQueryResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.DeleteEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteEQueryResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteEQueryResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryXML")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefsOnly")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.EvaluateEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryXML"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.poRefsOnly, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefsOnly"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateEQueryResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQueryResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateEQueryResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateEQueryResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateEQuerySnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryXML")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryXML"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateEQuerySnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQuerySnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateEQuerySnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateEQuerySnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetDescriptionFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetDescription] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetDescription(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetDescriptionResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetDescriptionResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetDescriptionResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getDescriptionResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetDescriptionResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetDescriptionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getDescriptionResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getDescriptionResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_SetDescriptionFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.SetDescription] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.SetDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.SetDescription(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.SetDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_SetDescriptionResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetDescriptionResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.SetDescriptionResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.SetDescriptionResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.SetDescriptionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.SetDescriptionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetElementsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetElementsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getElementsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetElementsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getElementsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getElementsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetElementsSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetElementsSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetElementsSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetElementsSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetElementsSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetElementsSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getElementsSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getElementsSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getElementsSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetSharedValuesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetSharedValues] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetSharedValues] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetSharedValues(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetSharedValues, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetSharedValuesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetSharedValuesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetSharedValuesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSharedValuesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetSharedValuesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetSharedValuesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSharedValuesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSharedValuesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetDetailsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetDetails] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetDetails] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetDetails(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetDetailsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetDetailsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetDetailsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getDetailsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetDetailsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetDetailsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getDetailsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getDetailsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetDetailsReadableFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetDetailsReadable] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetDetailsReadable] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "readable")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.GetDetailsReadable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetDetailsReadable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.readable, Some("http://clickcommerce.com/Extranet/WebServices"), Some("readable"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetDetailsReadableResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getDetailsReadableResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getDetailsReadableResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getDetailsReadableResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetTypeCompatibleSetsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSets] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSets] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.GetTypeCompatibleSets(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetTypeCompatibleSets, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetTypeCompatibleSetsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleSetsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeCompatibleSetsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeCompatibleSetsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "includeParameterized")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.includeParameterized, Some("http://clickcommerce.com/Extranet/WebServices"), Some("includeParameterized"), __scope, false),
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeCompatibleEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeCompatibleEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetBaseTypeCompatibleEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetBaseTypeCompatibleEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getBaseTypeCompatibleEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getBaseTypeCompatibleEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getBaseTypeCompatibleEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesContainingFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContaining] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContaining] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityOid")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContaining(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContaining, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        __obj.entityOid map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityOid"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetTypeCompatibleEQueriesContainingResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueriesContainingResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeCompatibleEQueriesContainingResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeCompatibleEQueriesContainingResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetESetsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetESets] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetESets] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetESets(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetESets, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetESetsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetESetsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetESetsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getESetsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetESetsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetESetsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getESetsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getESetsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebra] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebra] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAlgebra")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binding")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.EvaluateSetAlgebra(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateSetAlgebra, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.setAlgebra map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAlgebra"), __scope, false) } getOrElse {Nil},
        __obj.binding map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binding"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebraResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateSetAlgebraResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateSetAlgebraResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAlgebra")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binding")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.setAlgebra map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAlgebra"), __scope, false) } getOrElse {Nil},
        __obj.binding map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binding"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_EvaluateSetAlgebraSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebraSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateSetAlgebraSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateSetAlgebraSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueryReferencesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueryReferences] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueryReferences] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetEQueryReferences(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueryReferences, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEQueryReferencesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryReferencesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueryReferencesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueryReferencesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_AddEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.AddEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.AddEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityPORefs")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.AddEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AddEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        __obj.entityPORefs map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityPORefs"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_AddEntitySetElementsResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_RemoveEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.RemoveEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.RemoveEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityPORefs")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.RemoveEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RemoveEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        __obj.entityPORefs map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityPORefs"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_RemoveEntitySetElementsResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_RemoveAllEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_RemoveAllEntitySetElementsResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefsOnly")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.poRefsOnly, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefsOnly"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetElementsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElementsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetElementsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetElementsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetElementsSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetElementsSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElementsSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetElementsSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetElementsSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_SetEntitySetUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "uniqueKeysXML")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        __obj.uniqueKeysXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("uniqueKeysXML"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_SetEntitySetUniqueKeysResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetUniqueKeysResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetUniqueKeysResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetUniqueKeysResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetUniqueKeysResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntitySetTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_SetEntityTypeExtentUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "uniqueKeysXML")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.uniqueKeysXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("uniqueKeysXML"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_SetEntityTypeExtentUniqueKeysResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeysResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeExtentUniqueKeysResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeExtentUniqueKeysResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysReadableFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadable] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadable] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "readable")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.readable, Some("http://clickcommerce.com/Extranet/WebServices"), Some("readable"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_GetEntityTypeExtentUniqueKeysReadableResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeysReadableResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeExtentUniqueKeysReadableResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeExtentUniqueKeysReadableResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_UnregisterAllFromEntityTypeExtentFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "beUnsafe")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.beUnsafe, Some("http://clickcommerce.com/Extranet/WebServices"), Some("beUnsafe"), __scope, false))

  }

  trait DefaultComeztierclickmocksoapentityset_UnregisterAllFromEntityTypeExtentResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetStorageListFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.GetStorageList] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.GetStorageList] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.GetStorageList] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.GetStorageList())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetStorageList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetStorageListResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetStorageListResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetStorageListResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "GetStorageListResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetStorageListResponse(p1.headOption map { scalaxb.fromXML[com.eztier.clickmock.soap.entityset.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetStorageListResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetStorageListResult map { scalaxb.toXML[com.eztier.clickmock.soap.entityset.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("GetStorageListResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_ArrayOfStringFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.ArrayOfString] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    override def typeName: Option[String] = Some("ArrayOfString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.ArrayOfString] =
      phrase(safeRep(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "string")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.ArrayOfString(p1 map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }}) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.ArrayOfString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.string flatMap { scalaxb.toXML[Option[String]](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("string"), __scope, false) })

  }

  trait DefaultComeztierclickmocksoapentityset_LoginFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.Login] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.Login] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "storeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "userName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "password")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.entityset.Login(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.Login, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.storeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("storeName"), __scope, false) } getOrElse {Nil},
        __obj.userName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("userName"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("password"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_LoginResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.LoginResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.LoginResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "LoginResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.LoginResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.LoginResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LoginResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("LoginResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_LoginAsWindowsIdentityFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentity] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentity] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "storeName")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.storeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("storeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_LoginAsWindowsIdentityResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "LoginAsWindowsIdentityResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LoginAsWindowsIdentityResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("LoginAsWindowsIdentityResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_LogoffFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.Logoff] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.Logoff] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.Logoff(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.Logoff, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_LogoffResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.entityset.LogoffResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.entityset.LogoffResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.entityset.LogoffResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.entityset.LogoffResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.LogoffResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoapentityset_GetUserIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetUserID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetUserID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetUserID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetUserID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoapentityset_GetUserIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.entityset.GetUserIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.entityset.GetUserIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "GetUserIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.entityset.GetUserIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.entityset.GetUserIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetUserIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("GetUserIDResult"), __scope, false) } getOrElse {Nil})

  }


  trait EntitySetServicesSoap12Bindings { this: scalaxb.SoapClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    lazy val service: com.eztier.clickmock.soap.entityset.EntitySetServicesSoap = new EntitySetServicesSoap12Binding {}
    def baseAddress = new java.net.URI("http://rsnirbwcdcdvm01.nyumc.org/ClickXWebServices/EntityManager/EntitySetServices.asmx")

    trait EntitySetServicesSoap12Binding extends com.eztier.clickmock.soap.entityset.EntitySetServicesSoap {
      import scalaxb.ElemName._
      def createNewEType(svcSessionToken: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateNewETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateNewEType(svcSessionToken, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateNewETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewETypeResponse").head, Nil) }, {
              case x => x
            })
      def createNewETypeEx(svcSessionToken: Option[String], description: Option[String], details: Option[String], useKeyInformation: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateNewETypeEx(svcSessionToken, description, details, useKeyInformation), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewETypeEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewETypeEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewETypeExResponse").head, Nil) }, {
              case x => x
            })
      def createETypeForEntityType(svcSessionToken: Option[String], entityTypeName: Option[String], description: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateETypeForEntityType(svcSessionToken, entityTypeName, description), Some("http://clickcommerce.com/Extranet/WebServices"), "createETypeForEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createETypeForEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createETypeForEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def versionEType(svcSessionToken: Option[String], description: Option[String], details: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.VersionETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.VersionEType(svcSessionToken, description, details, migrateEntities), Some("http://clickcommerce.com/Extranet/WebServices"), "versionEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/versionEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.VersionETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "versionETypeResponse").head, Nil) }, {
              case x => x
            })
      def createOrUpdateEType(svcSessionToken: Option[String], description: Option[String], details: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateOrUpdateEType(svcSessionToken, description, details, migrateEntities), Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createOrUpdateEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createOrUpdateETypeResponse").head, Nil) }, {
              case x => x
            })
      def hasETypeNamed(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.HasETypeNamed(svcSessionToken, eTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "hasETypeNamed", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/hasETypeNamed"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.HasETypeNamedResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "hasETypeNamedResponse").head, Nil).hasETypeNamedResult }, {
              case x => x
            })
      def getETypes(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetETypesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetETypes(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getETypes", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getETypes"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetETypesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getETypesResponse").head, Nil) }, {
              case x => x
            })
      def getETypeInformationForGUI(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetETypeInformationForGUI(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getETypeInformationForGUI", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getETypeInformationForGUI"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getETypeInformationForGUIResponse").head, Nil) }, {
              case x => x
            })
      def getSubTypeInformationForGUI(svcSessionToken: Option[String], rootType: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUI(svcSessionToken, rootType), Some("http://clickcommerce.com/Extranet/WebServices"), "getSubTypeInformationForGUI", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSubTypeInformationForGUI"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSubTypeInformationForGUIResponse").head, Nil) }, {
              case x => x
            })
      def getEQueryInformationForGUI(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUI(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryInformationForGUI", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueryInformationForGUI"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueryInformationForGUIResponse").head, Nil) }, {
              case x => x
            })
      def renameEType(svcSessionToken: Option[String], eTypeName: Option[String], newETypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RenameETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.RenameEType(svcSessionToken, eTypeName, newETypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "renameEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/renameEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.RenameETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "renameETypeResponse").head, Nil) }, {
              case x => x
            })
      def deleteEType(svcSessionToken: Option[String], eTypeName: Option[String], deleteSubtypes: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.DeleteETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.DeleteEType(svcSessionToken, eTypeName, deleteSubtypes), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.DeleteETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteETypeResponse").head, Nil) }, {
              case x => x
            })
      def getNamesOfReferencedTypes(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypes(svcSessionToken, eTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getNamesOfReferencedTypes", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getNamesOfReferencedTypes"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getNamesOfReferencedTypesResponse").head, Nil) }, {
              case x => x
            })
      def createEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateEQuery(svcSessionToken, eQueryName, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "createEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createEQueryResponse").head, Nil) }, {
              case x => x
            })
      def createParameterizedEQuery(svcSessionToken: Option[String], eQueryName: Option[String], baseTypeName: Option[String], paramName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateParameterizedEQuery(svcSessionToken, eQueryName, baseTypeName, paramName), Some("http://clickcommerce.com/Extranet/WebServices"), "createParameterizedEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createParameterizedEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createParameterizedEQueryResponse").head, Nil) }, {
              case x => x
            })
      def createParameterizedEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], baseTypeName: Option[String], paramName: Option[String], visibilityFlags: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryEx(svcSessionToken, eQueryName, baseTypeName, paramName, visibilityFlags), Some("http://clickcommerce.com/Extranet/WebServices"), "createParameterizedEQueryEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createParameterizedEQueryEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createParameterizedEQueryExResponse").head, Nil) }, {
              case x => x
            })
      def alterEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AlterEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.AlterEQuery(svcSessionToken, eQueryName, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "alterEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/alterEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.AlterEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "alterEQueryResponse").head, Nil) }, {
              case x => x
            })
      def alterEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String], replace: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AlterEQueryExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.AlterEQueryEx(svcSessionToken, eQueryName, description, details, replace), Some("http://clickcommerce.com/Extranet/WebServices"), "alterEQueryEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/alterEQueryEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.AlterEQueryExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "alterEQueryExResponse").head, Nil) }, {
              case x => x
            })
      def createOrUpdateEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateOrUpdateEQuery(svcSessionToken, eQueryName, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createOrUpdateEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createOrUpdateEQueryResponse").head, Nil) }, {
              case x => x
            })
      def createOrUpdateEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String], replace: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryEx(svcSessionToken, eQueryName, description, details, replace), Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateEQueryEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createOrUpdateEQueryEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createOrUpdateEQueryExResponse").head, Nil) }, {
              case x => x
            })
      def hasEQueryNamed(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.HasEQueryNamed(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "hasEQueryNamed", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/hasEQueryNamed"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.HasEQueryNamedResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "hasEQueryNamedResponse").head, Nil).hasEQueryNamedResult }, {
              case x => x
            })
      def getEQueries(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEQueries(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def addExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String], explicitMembers: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.AddExplicitMembers(svcSessionToken, eQueryName, explicitMembers), Some("http://clickcommerce.com/Extranet/WebServices"), "addExplicitMembers", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addExplicitMembers"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addExplicitMembersResponse").head, Nil) }, {
              case x => x
            })
      def removeExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String], explicitMembers: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.RemoveExplicitMembers(svcSessionToken, eQueryName, explicitMembers), Some("http://clickcommerce.com/Extranet/WebServices"), "removeExplicitMembers", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/removeExplicitMembers"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "removeExplicitMembersResponse").head, Nil) }, {
              case x => x
            })
      def getExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetExplicitMembers(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "getExplicitMembers", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getExplicitMembers"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getExplicitMembersResponse").head, Nil) }, {
              case x => x
            })
      def getEQueryParameters(svcSessionToken: Option[String], eQueryName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEQueryParameters(svcSessionToken, eQueryName, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryParameters", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueryParameters"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueryParametersResponse").head, Nil) }, {
              case x => x
            })
      def renameEQuery(svcSessionToken: Option[String], eQueryName: Option[String], newEQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RenameEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.RenameEQuery(svcSessionToken, eQueryName, newEQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "renameEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/renameEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.RenameEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "renameEQueryResponse").head, Nil) }, {
              case x => x
            })
      def dependentEQueries(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.DependentEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.DependentEQueries(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "dependentEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/dependentEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.DependentEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "dependentEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def deleteEQuery(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.DeleteEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.DeleteEQuery(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.DeleteEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEQueryResponse").head, Nil) }, {
              case x => x
            })
      def evaluateEQuery(svcSessionToken: Option[String], eQueryXML: Option[String], poRefsOnly: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.EvaluateEQuery(svcSessionToken, eQueryXML, poRefsOnly), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateEQueryResponse").head, Nil) }, {
              case x => x
            })
      def evaluateEQuerySnapshot(svcSessionToken: Option[String], eQueryXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshot(svcSessionToken, eQueryXML), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQuerySnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateEQuerySnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateEQuerySnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getDescription(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetDescriptionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetDescription(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getDescription", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getDescription"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetDescriptionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getDescriptionResponse").head, Nil) }, {
              case x => x
            })
      def setDescription(svcSessionToken: Option[String], eSetName: Option[String], description: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.SetDescriptionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.SetDescription(svcSessionToken, eSetName, description), Some("http://clickcommerce.com/Extranet/WebServices"), "setDescription", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setDescription"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.SetDescriptionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setDescriptionResponse").head, Nil) }, {
              case x => x
            })
      def getElements(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetElements(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getElementsResponse").head, Nil) }, {
              case x => x
            })
      def getElementsSnapshot(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetElementsSnapshot(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getElementsSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getElementsSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getElementsSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getSharedValues(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetSharedValuesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetSharedValues(svcSessionToken, eTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getSharedValues", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSharedValues"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetSharedValuesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSharedValuesResponse").head, Nil) }, {
              case x => x
            })
      def getDetails(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetDetailsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetDetails(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getDetails", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getDetails"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetDetailsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getDetailsResponse").head, Nil) }, {
              case x => x
            })
      def getDetailsReadable(svcSessionToken: Option[String], eSetName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetDetailsReadable(svcSessionToken, eSetName, readable), Some("http://clickcommerce.com/Extranet/WebServices"), "getDetailsReadable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getDetailsReadable"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getDetailsReadableResponse").head, Nil) }, {
              case x => x
            })
      def getTypeCompatibleSets(svcSessionToken: Option[String], eTypeName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetTypeCompatibleSets(svcSessionToken, eTypeName, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleSets", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeCompatibleSets"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeCompatibleSetsResponse").head, Nil) }, {
              case x => x
            })
      def getTypeCompatibleEQueries(svcSessionToken: Option[String], eTypeName: Option[String], includeParameterized: Boolean, sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueries(svcSessionToken, eTypeName, includeParameterized, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeCompatibleEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeCompatibleEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def getBaseTypeCompatibleEQueries(svcSessionToken: Option[String], eTypeName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueries(svcSessionToken, eTypeName, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getBaseTypeCompatibleEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getBaseTypeCompatibleEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getBaseTypeCompatibleEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def getTypeCompatibleEQueriesContaining(svcSessionToken: Option[String], eTypeName: Option[String], entityOid: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContaining(svcSessionToken, eTypeName, entityOid), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueriesContaining", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeCompatibleEQueriesContaining"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeCompatibleEQueriesContainingResponse").head, Nil) }, {
              case x => x
            })
      def getESets(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetESetsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetESets(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getESets", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getESets"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetESetsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getESetsResponse").head, Nil) }, {
              case x => x
            })
      def evaluateSetAlgebra(svcSessionToken: Option[String], setAlgebra: Option[String], binding: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.EvaluateSetAlgebra(svcSessionToken, setAlgebra, binding), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebra", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateSetAlgebra"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateSetAlgebraResponse").head, Nil) }, {
              case x => x
            })
      def evaluateSetAlgebraSnapshot(svcSessionToken: Option[String], setAlgebra: Option[String], binding: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshot(svcSessionToken, setAlgebra, binding), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebraSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateSetAlgebraSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateSetAlgebraSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getEQueryReferences(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEQueryReferences(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryReferences", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueryReferences"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueryReferencesResponse").head, Nil) }, {
              case x => x
            })
      def addEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], entityPORefs: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.AddEntitySetElements(svcSessionToken, entitySetPORef, entityPORefs), Some("http://clickcommerce.com/Extranet/WebServices"), "addEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def removeEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], entityPORefs: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.RemoveEntitySetElements(svcSessionToken, entitySetPORef, entityPORefs), Some("http://clickcommerce.com/Extranet/WebServices"), "removeEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/removeEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "removeEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def removeAllEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElements(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "removeAllEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/removeAllEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "removeAllEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], poRefsOnly: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEntitySetElements(svcSessionToken, entitySetPORef, poRefsOnly), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetElementsSnapshot(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshot(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElementsSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetElementsSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetElementsSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def setEntitySetUniqueKeys(svcSessionToken: Option[String], entitySetPORef: Option[String], uniqueKeysXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeys(svcSessionToken, entitySetPORef, uniqueKeysXML), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntitySetUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntitySetUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntitySetUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetUniqueKeys(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeys(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetType(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEntitySetType(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetTypeResponse").head, Nil) }, {
              case x => x
            })
      def setEntityTypeExtentUniqueKeys(svcSessionToken: Option[String], entityTypeName: Option[String], uniqueKeysXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeys(svcSessionToken, entityTypeName, uniqueKeysXML), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntityTypeExtentUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntityTypeExtentUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntityTypeExtentUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeExtentUniqueKeys(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeys(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeExtentUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeExtentUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeExtentUniqueKeysReadable(svcSessionToken: Option[String], entityTypeName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadable(svcSessionToken, entityTypeName, readable), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeysReadable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeExtentUniqueKeysReadable"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeExtentUniqueKeysReadableResponse").head, Nil) }, {
              case x => x
            })
      def unregisterAllFromEntityTypeExtent(svcSessionToken: Option[String], entityTypeName: Option[String], beUnsafe: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtent(svcSessionToken, entityTypeName, beUnsafe), Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterAllFromEntityTypeExtent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/unregisterAllFromEntityTypeExtent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "unregisterAllFromEntityTypeExtentResponse").head, Nil) }, {
              case x => x
            })
      def getStorageList()(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetStorageListResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetStorageList(), Some("http://clickcommerce.com/Extranet/WebServices"), "GetStorageList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetStorageList"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetStorageListResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetStorageListResponse").head, Nil) }, {
              case x => x
            })
      def login(storeName: Option[String], userName: Option[String], password: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.LoginResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.Login(storeName, userName, password), Some("http://clickcommerce.com/Extranet/WebServices"), "Login", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Login"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.LoginResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginResponse").head, Nil) }, {
              case x => x
            })
      def loginAsWindowsIdentity(storeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentity(storeName), Some("http://clickcommerce.com/Extranet/WebServices"), "LoginAsWindowsIdentity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/LoginAsWindowsIdentity"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginAsWindowsIdentityResponse").head, Nil) }, {
              case x => x
            })
      def logoff(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.LogoffResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.Logoff(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "Logoff", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Logoff"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.LogoffResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LogoffResponse").head, Nil) }, {
              case x => x
            })
      def getUserID(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetUserIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.entityset.GetUserID(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "GetUserID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetUserID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.entityset.GetUserIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetUserIDResponse").head, Nil) }, {
              case x => x
            })
    }
  }



}

