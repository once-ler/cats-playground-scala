// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.eztier.clickmock.soap

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[com.eztier.clickmock.soap.Foo](node)
val document = scalaxb.toXML[com.eztier.clickmock.soap.Foo](obj, "foo", com.eztier.clickmock.soap.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://clickcommerce.com/Extranet/WebServices",
    Some("tns0") -> "http://www.webserviceX.NET/",
    Some("tns") -> "http://clickcommerce.com/Extranet/WebServices",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Comeztierclickmocksoap_RootEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RootEntityType] = new DefaultComeztierclickmocksoap_RootEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_RootEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RootEntityTypeResponse] = new DefaultComeztierclickmocksoap_RootEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RootEntityTypeNameFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RootEntityTypeName] = new DefaultComeztierclickmocksoap_RootEntityTypeNameFormat {}
  implicit lazy val Comeztierclickmocksoap_RootEntityTypeNameResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RootEntityTypeNameResponse] = new DefaultComeztierclickmocksoap_RootEntityTypeNameResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeNamesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeNames] = new DefaultComeztierclickmocksoap_GetTypeNamesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeNamesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeNamesResponse] = new DefaultComeztierclickmocksoap_GetTypeNamesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_EntityTypeExistsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EntityTypeExists] = new DefaultComeztierclickmocksoap_EntityTypeExistsFormat {}
  implicit lazy val Comeztierclickmocksoap_EntityTypeExistsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EntityTypeExistsResponse] = new DefaultComeztierclickmocksoap_EntityTypeExistsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityType] = new DefaultComeztierclickmocksoap_GetEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeResponse] = new DefaultComeztierclickmocksoap_GetEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeForSourceControlFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeForSourceControl] = new DefaultComeztierclickmocksoap_GetEntityTypeForSourceControlFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeForSourceControlResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse] = new DefaultComeztierclickmocksoap_GetEntityTypeForSourceControlResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeReadableFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeReadable] = new DefaultComeztierclickmocksoap_GetEntityTypeReadableFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeReadableResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeReadableResponse] = new DefaultComeztierclickmocksoap_GetEntityTypeReadableResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_EntityTypeHasSubtypesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EntityTypeHasSubtypes] = new DefaultComeztierclickmocksoap_EntityTypeHasSubtypesFormat {}
  implicit lazy val Comeztierclickmocksoap_EntityTypeHasSubtypesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EntityTypeHasSubtypesResponse] = new DefaultComeztierclickmocksoap_EntityTypeHasSubtypesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SubtypesOfEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SubtypesOfEntityType] = new DefaultComeztierclickmocksoap_SubtypesOfEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_SubtypesOfEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse] = new DefaultComeztierclickmocksoap_SubtypesOfEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SubtypeNamesOfEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SubtypeNamesOfEntityType] = new DefaultComeztierclickmocksoap_SubtypeNamesOfEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_SubtypeNamesOfEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse] = new DefaultComeztierclickmocksoap_SubtypeNamesOfEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEntityType] = new DefaultComeztierclickmocksoap_DeleteEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEntityTypeResponse] = new DefaultComeztierclickmocksoap_DeleteEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEntityTypeEtAlFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEntityTypeEtAl] = new DefaultComeztierclickmocksoap_DeleteEntityTypeEtAlFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEntityTypeEtAlResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse] = new DefaultComeztierclickmocksoap_DeleteEntityTypeEtAlResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewEntityType] = new DefaultComeztierclickmocksoap_CreateNewEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewEntityTypeResponse] = new DefaultComeztierclickmocksoap_CreateNewEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewVersionOfEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewVersionOfEntityType] = new DefaultComeztierclickmocksoap_CreateNewVersionOfEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewVersionOfEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse] = new DefaultComeztierclickmocksoap_CreateNewVersionOfEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AddAttributeAndVersionTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddAttributeAndVersionType] = new DefaultComeztierclickmocksoap_AddAttributeAndVersionTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_AddAttributeAndVersionTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse] = new DefaultComeztierclickmocksoap_AddAttributeAndVersionTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AddAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddAttribute] = new DefaultComeztierclickmocksoap_AddAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_AddAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddAttributeResponse] = new DefaultComeztierclickmocksoap_AddAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteAttribute] = new DefaultComeztierclickmocksoap_DeleteAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteAttributeResponse] = new DefaultComeztierclickmocksoap_DeleteAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DropKeyFromAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DropKeyFromAttribute] = new DefaultComeztierclickmocksoap_DropKeyFromAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_DropKeyFromAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DropKeyFromAttributeResponse] = new DefaultComeztierclickmocksoap_DropKeyFromAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetAttributePropertyFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetAttributeProperty] = new DefaultComeztierclickmocksoap_SetAttributePropertyFormat {}
  implicit lazy val Comeztierclickmocksoap_SetAttributePropertyResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetAttributePropertyResponse] = new DefaultComeztierclickmocksoap_SetAttributePropertyResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetAttributePropertyFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetAttributeProperty] = new DefaultComeztierclickmocksoap_GetAttributePropertyFormat {}
  implicit lazy val Comeztierclickmocksoap_GetAttributePropertyResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetAttributePropertyResponse] = new DefaultComeztierclickmocksoap_GetAttributePropertyResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineAttribute] = new DefaultComeztierclickmocksoap_RedefineAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineAttributeResponse] = new DefaultComeztierclickmocksoap_RedefineAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetKeyAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetKeyAttribute] = new DefaultComeztierclickmocksoap_SetKeyAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_SetKeyAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetKeyAttributeResponse] = new DefaultComeztierclickmocksoap_SetKeyAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetKeyAttributeAndMigrateFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetKeyAttributeAndMigrate] = new DefaultComeztierclickmocksoap_SetKeyAttributeAndMigrateFormat {}
  implicit lazy val Comeztierclickmocksoap_SetKeyAttributeAndMigrateResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetKeyAttributeAndMigrateResponse] = new DefaultComeztierclickmocksoap_SetKeyAttributeAndMigrateResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_MigrateAllFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.MigrateAll] = new DefaultComeztierclickmocksoap_MigrateAllFormat {}
  implicit lazy val Comeztierclickmocksoap_MigrateAllResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.MigrateAllResponse] = new DefaultComeztierclickmocksoap_MigrateAllResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AddMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddMethod] = new DefaultComeztierclickmocksoap_AddMethodFormat {}
  implicit lazy val Comeztierclickmocksoap_AddMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddMethodResponse] = new DefaultComeztierclickmocksoap_AddMethodResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineMethod] = new DefaultComeztierclickmocksoap_RedefineMethodFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineMethodResponse] = new DefaultComeztierclickmocksoap_RedefineMethodResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AddScriptMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddScriptMethod] = new DefaultComeztierclickmocksoap_AddScriptMethodFormat {}
  implicit lazy val Comeztierclickmocksoap_AddScriptMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddScriptMethodResponse] = new DefaultComeztierclickmocksoap_AddScriptMethodResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteMethod] = new DefaultComeztierclickmocksoap_DeleteMethodFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteMethodResponse] = new DefaultComeztierclickmocksoap_DeleteMethodResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AddEventFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddEvent] = new DefaultComeztierclickmocksoap_AddEventFormat {}
  implicit lazy val Comeztierclickmocksoap_AddEventResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddEventResponse] = new DefaultComeztierclickmocksoap_AddEventResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEventFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEvent] = new DefaultComeztierclickmocksoap_DeleteEventFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEventResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEventResponse] = new DefaultComeztierclickmocksoap_DeleteEventResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AllEntitiesOfTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AllEntitiesOfType] = new DefaultComeztierclickmocksoap_AllEntitiesOfTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_AllEntitiesOfTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AllEntitiesOfTypeResponse] = new DefaultComeztierclickmocksoap_AllEntitiesOfTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_EntitiesOfTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EntitiesOfType] = new DefaultComeztierclickmocksoap_EntitiesOfTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_EntitiesOfTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EntitiesOfTypeResponse] = new DefaultComeztierclickmocksoap_EntitiesOfTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AllEntitiesOfVersionOfTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AllEntitiesOfVersionOfType] = new DefaultComeztierclickmocksoap_AllEntitiesOfVersionOfTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_AllEntitiesOfVersionOfTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse] = new DefaultComeztierclickmocksoap_AllEntitiesOfVersionOfTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityByID] = new DefaultComeztierclickmocksoap_GetEntityByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityByIDResponse] = new DefaultComeztierclickmocksoap_GetEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AllEntitiesOfTypeSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshot] = new DefaultComeztierclickmocksoap_AllEntitiesOfTypeSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoap_AllEntitiesOfTypeSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse] = new DefaultComeztierclickmocksoap_AllEntitiesOfTypeSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetPORefsFromSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetPORefsFromSnapshot] = new DefaultComeztierclickmocksoap_GetPORefsFromSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoap_GetPORefsFromSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse] = new DefaultComeztierclickmocksoap_GetPORefsFromSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_ArrayOfStringFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.ArrayOfString] = new DefaultComeztierclickmocksoap_ArrayOfStringFormat {}
  implicit lazy val Comeztierclickmocksoap_ReleaseSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.ReleaseSnapshot] = new DefaultComeztierclickmocksoap_ReleaseSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoap_ReleaseSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.ReleaseSnapshotResponse] = new DefaultComeztierclickmocksoap_ReleaseSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetXmlStringsOfOidStringsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetXmlStringsOfOidStrings] = new DefaultComeztierclickmocksoap_GetXmlStringsOfOidStringsFormat {}
  implicit lazy val Comeztierclickmocksoap_GetXmlStringsOfOidStringsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse] = new DefaultComeztierclickmocksoap_GetXmlStringsOfOidStringsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityByAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityByAttribute] = new DefaultComeztierclickmocksoap_GetEntityByAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityByAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityByAttributeResponse] = new DefaultComeztierclickmocksoap_GetEntityByAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateEntityFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateEntity] = new DefaultComeztierclickmocksoap_CreateEntityFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateEntityResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateEntityResponse] = new DefaultComeztierclickmocksoap_CreateEntityResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEntityByID] = new DefaultComeztierclickmocksoap_RedefineEntityByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEntityByIDResponse] = new DefaultComeztierclickmocksoap_RedefineEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineEntityByID1Format: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEntityByID1] = new DefaultComeztierclickmocksoap_RedefineEntityByID1Format {}
  implicit lazy val Comeztierclickmocksoap_RedefineEntityByID1ResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEntityByID1Response] = new DefaultComeztierclickmocksoap_RedefineEntityByID1ResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineEntityByID2Format: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEntityByID2] = new DefaultComeztierclickmocksoap_RedefineEntityByID2Format {}
  implicit lazy val Comeztierclickmocksoap_RedefineEntityByID2ResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEntityByID2Response] = new DefaultComeztierclickmocksoap_RedefineEntityByID2ResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RegisterEventByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RegisterEventByID] = new DefaultComeztierclickmocksoap_RegisterEventByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_RegisterEventByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RegisterEventByIDResponse] = new DefaultComeztierclickmocksoap_RegisterEventByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_UnregisterEventByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterEventByID] = new DefaultComeztierclickmocksoap_UnregisterEventByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_UnregisterEventByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterEventByIDResponse] = new DefaultComeztierclickmocksoap_UnregisterEventByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineEventFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEvent] = new DefaultComeztierclickmocksoap_RedefineEventFormat {}
  implicit lazy val Comeztierclickmocksoap_RedefineEventResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RedefineEventResponse] = new DefaultComeztierclickmocksoap_RedefineEventResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetAttributeEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetAttributeEntityByID] = new DefaultComeztierclickmocksoap_SetAttributeEntityByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_SetAttributeEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetAttributeEntityByIDResponse] = new DefaultComeztierclickmocksoap_SetAttributeEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetAttributeEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetAttributeEntityByID] = new DefaultComeztierclickmocksoap_GetAttributeEntityByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_GetAttributeEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetAttributeEntityByIDResponse] = new DefaultComeztierclickmocksoap_GetAttributeEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetFormattedAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetFormattedAttribute] = new DefaultComeztierclickmocksoap_SetFormattedAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_SetFormattedAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetFormattedAttributeResponse] = new DefaultComeztierclickmocksoap_SetFormattedAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetFormattedAttributeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetFormattedAttribute] = new DefaultComeztierclickmocksoap_GetFormattedAttributeFormat {}
  implicit lazy val Comeztierclickmocksoap_GetFormattedAttributeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetFormattedAttributeResponse] = new DefaultComeztierclickmocksoap_GetFormattedAttributeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RenderValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RenderValue] = new DefaultComeztierclickmocksoap_RenderValueFormat {}
  implicit lazy val Comeztierclickmocksoap_RenderValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RenderValueResponse] = new DefaultComeztierclickmocksoap_RenderValueResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_InterpretValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.InterpretValue] = new DefaultComeztierclickmocksoap_InterpretValueFormat {}
  implicit lazy val Comeztierclickmocksoap_InterpretValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.InterpretValueResponse] = new DefaultComeztierclickmocksoap_InterpretValueResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_TriggerEventByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.TriggerEventByID] = new DefaultComeztierclickmocksoap_TriggerEventByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_TriggerEventByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.TriggerEventByIDResponse] = new DefaultComeztierclickmocksoap_TriggerEventByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_InvokeInstanceMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.InvokeInstanceMethod] = new DefaultComeztierclickmocksoap_InvokeInstanceMethodFormat {}
  implicit lazy val Comeztierclickmocksoap_ArrayOfAnyTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.ArrayOfAnyType] = new DefaultComeztierclickmocksoap_ArrayOfAnyTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_InvokeInstanceMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.InvokeInstanceMethodResponse] = new DefaultComeztierclickmocksoap_InvokeInstanceMethodResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_InvokeTypeMethodFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.InvokeTypeMethod] = new DefaultComeztierclickmocksoap_InvokeTypeMethodFormat {}
  implicit lazy val Comeztierclickmocksoap_InvokeTypeMethodResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.InvokeTypeMethodResponse] = new DefaultComeztierclickmocksoap_InvokeTypeMethodResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_UnregisterEntityByIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterEntityByID] = new DefaultComeztierclickmocksoap_UnregisterEntityByIDFormat {}
  implicit lazy val Comeztierclickmocksoap_UnregisterEntityByIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterEntityByIDResponse] = new DefaultComeztierclickmocksoap_UnregisterEntityByIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSupportedCurrenciesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSupportedCurrencies] = new DefaultComeztierclickmocksoap_GetSupportedCurrenciesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSupportedCurrenciesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSupportedCurrenciesResponse] = new DefaultComeztierclickmocksoap_GetSupportedCurrenciesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSupportedCurrencyFormatsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSupportedCurrencyFormats] = new DefaultComeztierclickmocksoap_GetSupportedCurrencyFormatsFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSupportedCurrencyFormatsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse] = new DefaultComeztierclickmocksoap_GetSupportedCurrencyFormatsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_LoadJavaClassFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LoadJavaClass] = new DefaultComeztierclickmocksoap_LoadJavaClassFormat {}
  implicit lazy val Comeztierclickmocksoap_LoadJavaClassResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LoadJavaClassResponse] = new DefaultComeztierclickmocksoap_LoadJavaClassResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_LoadAssemblyFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LoadAssembly] = new DefaultComeztierclickmocksoap_LoadAssemblyFormat {}
  implicit lazy val Comeztierclickmocksoap_LoadAssemblyResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LoadAssemblyResponse] = new DefaultComeztierclickmocksoap_LoadAssemblyResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetExtentForSCFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetExtentForSC] = new DefaultComeztierclickmocksoap_GetExtentForSCFormat {}
  implicit lazy val Comeztierclickmocksoap_GetExtentForSCResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetExtentForSCResponse] = new DefaultComeztierclickmocksoap_GetExtentForSCResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetExtentFromSCFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetExtentFromSC] = new DefaultComeztierclickmocksoap_SetExtentFromSCFormat {}
  implicit lazy val Comeztierclickmocksoap_SetExtentFromSCResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetExtentFromSCResponse] = new DefaultComeztierclickmocksoap_SetExtentFromSCResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntityAttributeValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityAttributeValue] = new DefaultComeztierclickmocksoap_SetEntityAttributeValueFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntityAttributeValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityAttributeValueResponse] = new DefaultComeztierclickmocksoap_SetEntityAttributeValueResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntityTypeAttributeValueFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityTypeAttributeValue] = new DefaultComeztierclickmocksoap_SetEntityTypeAttributeValueFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntityTypeAttributeValueResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse] = new DefaultComeztierclickmocksoap_SetEntityTypeAttributeValueResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetStorageListFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetStorageList] = new DefaultComeztierclickmocksoap_GetStorageListFormat {}
  implicit lazy val Comeztierclickmocksoap_GetStorageListResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetStorageListResponse] = new DefaultComeztierclickmocksoap_GetStorageListResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_LoginFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.Login] = new DefaultComeztierclickmocksoap_LoginFormat {}
  implicit lazy val Comeztierclickmocksoap_LoginResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LoginResponse] = new DefaultComeztierclickmocksoap_LoginResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_LoginAsWindowsIdentityFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LoginAsWindowsIdentity] = new DefaultComeztierclickmocksoap_LoginAsWindowsIdentityFormat {}
  implicit lazy val Comeztierclickmocksoap_LoginAsWindowsIdentityResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse] = new DefaultComeztierclickmocksoap_LoginAsWindowsIdentityResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_LogoffFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.Logoff] = new DefaultComeztierclickmocksoap_LogoffFormat {}
  implicit lazy val Comeztierclickmocksoap_LogoffResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.LogoffResponse] = new DefaultComeztierclickmocksoap_LogoffResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetUserIDFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetUserID] = new DefaultComeztierclickmocksoap_GetUserIDFormat {}
  implicit lazy val Comeztierclickmocksoap_GetUserIDResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetUserIDResponse] = new DefaultComeztierclickmocksoap_GetUserIDResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewEType] = new DefaultComeztierclickmocksoap_CreateNewETypeFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewETypeResponse] = new DefaultComeztierclickmocksoap_CreateNewETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewETypeExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewETypeEx] = new DefaultComeztierclickmocksoap_CreateNewETypeExFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateNewETypeExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewETypeExResponse] = new DefaultComeztierclickmocksoap_CreateNewETypeExResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateETypeForEntityTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateETypeForEntityType] = new DefaultComeztierclickmocksoap_CreateETypeForEntityTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateETypeForEntityTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse] = new DefaultComeztierclickmocksoap_CreateETypeForEntityTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_VersionETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.VersionEType] = new DefaultComeztierclickmocksoap_VersionETypeFormat {}
  implicit lazy val Comeztierclickmocksoap_VersionETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.VersionETypeResponse] = new DefaultComeztierclickmocksoap_VersionETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateOrUpdateETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateEType] = new DefaultComeztierclickmocksoap_CreateOrUpdateETypeFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateOrUpdateETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateETypeResponse] = new DefaultComeztierclickmocksoap_CreateOrUpdateETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_HasETypeNamedFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.HasETypeNamed] = new DefaultComeztierclickmocksoap_HasETypeNamedFormat {}
  implicit lazy val Comeztierclickmocksoap_HasETypeNamedResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.HasETypeNamedResponse] = new DefaultComeztierclickmocksoap_HasETypeNamedResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetETypesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetETypes] = new DefaultComeztierclickmocksoap_GetETypesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetETypesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetETypesResponse] = new DefaultComeztierclickmocksoap_GetETypesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetETypeInformationForGUIFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetETypeInformationForGUI] = new DefaultComeztierclickmocksoap_GetETypeInformationForGUIFormat {}
  implicit lazy val Comeztierclickmocksoap_GetETypeInformationForGUIResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetETypeInformationForGUIResponse] = new DefaultComeztierclickmocksoap_GetETypeInformationForGUIResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSubTypeInformationForGUIFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSubTypeInformationForGUI] = new DefaultComeztierclickmocksoap_GetSubTypeInformationForGUIFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSubTypeInformationForGUIResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse] = new DefaultComeztierclickmocksoap_GetSubTypeInformationForGUIResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueryInformationForGUIFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueryInformationForGUI] = new DefaultComeztierclickmocksoap_GetEQueryInformationForGUIFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueryInformationForGUIResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse] = new DefaultComeztierclickmocksoap_GetEQueryInformationForGUIResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RenameETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RenameEType] = new DefaultComeztierclickmocksoap_RenameETypeFormat {}
  implicit lazy val Comeztierclickmocksoap_RenameETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RenameETypeResponse] = new DefaultComeztierclickmocksoap_RenameETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteETypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEType] = new DefaultComeztierclickmocksoap_DeleteETypeFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteETypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteETypeResponse] = new DefaultComeztierclickmocksoap_DeleteETypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetNamesOfReferencedTypesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetNamesOfReferencedTypes] = new DefaultComeztierclickmocksoap_GetNamesOfReferencedTypesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetNamesOfReferencedTypesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse] = new DefaultComeztierclickmocksoap_GetNamesOfReferencedTypesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateEQuery] = new DefaultComeztierclickmocksoap_CreateEQueryFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateEQueryResponse] = new DefaultComeztierclickmocksoap_CreateEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateParameterizedEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateParameterizedEQuery] = new DefaultComeztierclickmocksoap_CreateParameterizedEQueryFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateParameterizedEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateParameterizedEQueryResponse] = new DefaultComeztierclickmocksoap_CreateParameterizedEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateParameterizedEQueryExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateParameterizedEQueryEx] = new DefaultComeztierclickmocksoap_CreateParameterizedEQueryExFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateParameterizedEQueryExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse] = new DefaultComeztierclickmocksoap_CreateParameterizedEQueryExResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AlterEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AlterEQuery] = new DefaultComeztierclickmocksoap_AlterEQueryFormat {}
  implicit lazy val Comeztierclickmocksoap_AlterEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AlterEQueryResponse] = new DefaultComeztierclickmocksoap_AlterEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AlterEQueryExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AlterEQueryEx] = new DefaultComeztierclickmocksoap_AlterEQueryExFormat {}
  implicit lazy val Comeztierclickmocksoap_AlterEQueryExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AlterEQueryExResponse] = new DefaultComeztierclickmocksoap_AlterEQueryExResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateOrUpdateEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateEQuery] = new DefaultComeztierclickmocksoap_CreateOrUpdateEQueryFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateOrUpdateEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse] = new DefaultComeztierclickmocksoap_CreateOrUpdateEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateOrUpdateEQueryExFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateEQueryEx] = new DefaultComeztierclickmocksoap_CreateOrUpdateEQueryExFormat {}
  implicit lazy val Comeztierclickmocksoap_CreateOrUpdateEQueryExResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse] = new DefaultComeztierclickmocksoap_CreateOrUpdateEQueryExResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_HasEQueryNamedFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.HasEQueryNamed] = new DefaultComeztierclickmocksoap_HasEQueryNamedFormat {}
  implicit lazy val Comeztierclickmocksoap_HasEQueryNamedResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.HasEQueryNamedResponse] = new DefaultComeztierclickmocksoap_HasEQueryNamedResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueries] = new DefaultComeztierclickmocksoap_GetEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueriesResponse] = new DefaultComeztierclickmocksoap_GetEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AddExplicitMembersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddExplicitMembers] = new DefaultComeztierclickmocksoap_AddExplicitMembersFormat {}
  implicit lazy val Comeztierclickmocksoap_AddExplicitMembersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddExplicitMembersResponse] = new DefaultComeztierclickmocksoap_AddExplicitMembersResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RemoveExplicitMembersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveExplicitMembers] = new DefaultComeztierclickmocksoap_RemoveExplicitMembersFormat {}
  implicit lazy val Comeztierclickmocksoap_RemoveExplicitMembersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveExplicitMembersResponse] = new DefaultComeztierclickmocksoap_RemoveExplicitMembersResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetExplicitMembersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetExplicitMembers] = new DefaultComeztierclickmocksoap_GetExplicitMembersFormat {}
  implicit lazy val Comeztierclickmocksoap_GetExplicitMembersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetExplicitMembersResponse] = new DefaultComeztierclickmocksoap_GetExplicitMembersResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueryParametersFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueryParameters] = new DefaultComeztierclickmocksoap_GetEQueryParametersFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueryParametersResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueryParametersResponse] = new DefaultComeztierclickmocksoap_GetEQueryParametersResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RenameEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RenameEQuery] = new DefaultComeztierclickmocksoap_RenameEQueryFormat {}
  implicit lazy val Comeztierclickmocksoap_RenameEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RenameEQueryResponse] = new DefaultComeztierclickmocksoap_RenameEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DependentEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DependentEQueries] = new DefaultComeztierclickmocksoap_DependentEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoap_DependentEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DependentEQueriesResponse] = new DefaultComeztierclickmocksoap_DependentEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEQuery] = new DefaultComeztierclickmocksoap_DeleteEQueryFormat {}
  implicit lazy val Comeztierclickmocksoap_DeleteEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEQueryResponse] = new DefaultComeztierclickmocksoap_DeleteEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateEQueryFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateEQuery] = new DefaultComeztierclickmocksoap_EvaluateEQueryFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateEQueryResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateEQueryResponse] = new DefaultComeztierclickmocksoap_EvaluateEQueryResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateEQuerySnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateEQuerySnapshot] = new DefaultComeztierclickmocksoap_EvaluateEQuerySnapshotFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateEQuerySnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse] = new DefaultComeztierclickmocksoap_EvaluateEQuerySnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetDescriptionFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetDescription] = new DefaultComeztierclickmocksoap_GetDescriptionFormat {}
  implicit lazy val Comeztierclickmocksoap_GetDescriptionResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetDescriptionResponse] = new DefaultComeztierclickmocksoap_GetDescriptionResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetDescriptionFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetDescription] = new DefaultComeztierclickmocksoap_SetDescriptionFormat {}
  implicit lazy val Comeztierclickmocksoap_SetDescriptionResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetDescriptionResponse] = new DefaultComeztierclickmocksoap_SetDescriptionResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetElements] = new DefaultComeztierclickmocksoap_GetElementsFormat {}
  implicit lazy val Comeztierclickmocksoap_GetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetElementsResponse] = new DefaultComeztierclickmocksoap_GetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetElementsSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetElementsSnapshot] = new DefaultComeztierclickmocksoap_GetElementsSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoap_GetElementsSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetElementsSnapshotResponse] = new DefaultComeztierclickmocksoap_GetElementsSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSharedValuesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSharedValues] = new DefaultComeztierclickmocksoap_GetSharedValuesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetSharedValuesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetSharedValuesResponse] = new DefaultComeztierclickmocksoap_GetSharedValuesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetDetailsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetDetails] = new DefaultComeztierclickmocksoap_GetDetailsFormat {}
  implicit lazy val Comeztierclickmocksoap_GetDetailsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetDetailsResponse] = new DefaultComeztierclickmocksoap_GetDetailsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetDetailsReadableFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetDetailsReadable] = new DefaultComeztierclickmocksoap_GetDetailsReadableFormat {}
  implicit lazy val Comeztierclickmocksoap_GetDetailsReadableResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetDetailsReadableResponse] = new DefaultComeztierclickmocksoap_GetDetailsReadableResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeCompatibleSetsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeCompatibleSets] = new DefaultComeztierclickmocksoap_GetTypeCompatibleSetsFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeCompatibleSetsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse] = new DefaultComeztierclickmocksoap_GetTypeCompatibleSetsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeCompatibleEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeCompatibleEQueries] = new DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeCompatibleEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse] = new DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetBaseTypeCompatibleEQueriesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueries] = new DefaultComeztierclickmocksoap_GetBaseTypeCompatibleEQueriesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetBaseTypeCompatibleEQueriesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse] = new DefaultComeztierclickmocksoap_GetBaseTypeCompatibleEQueriesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeCompatibleEQueriesContainingFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContaining] = new DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesContainingFormat {}
  implicit lazy val Comeztierclickmocksoap_GetTypeCompatibleEQueriesContainingResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse] = new DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesContainingResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetESetsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetESets] = new DefaultComeztierclickmocksoap_GetESetsFormat {}
  implicit lazy val Comeztierclickmocksoap_GetESetsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetESetsResponse] = new DefaultComeztierclickmocksoap_GetESetsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateSetAlgebraFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateSetAlgebra] = new DefaultComeztierclickmocksoap_EvaluateSetAlgebraFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateSetAlgebraResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateSetAlgebraResponse] = new DefaultComeztierclickmocksoap_EvaluateSetAlgebraResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateSetAlgebraSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshot] = new DefaultComeztierclickmocksoap_EvaluateSetAlgebraSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoap_EvaluateSetAlgebraSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse] = new DefaultComeztierclickmocksoap_EvaluateSetAlgebraSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueryReferencesFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueryReferences] = new DefaultComeztierclickmocksoap_GetEQueryReferencesFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEQueryReferencesResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEQueryReferencesResponse] = new DefaultComeztierclickmocksoap_GetEQueryReferencesResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_AddEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddEntitySetElements] = new DefaultComeztierclickmocksoap_AddEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoap_AddEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.AddEntitySetElementsResponse] = new DefaultComeztierclickmocksoap_AddEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RemoveEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveEntitySetElements] = new DefaultComeztierclickmocksoap_RemoveEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoap_RemoveEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveEntitySetElementsResponse] = new DefaultComeztierclickmocksoap_RemoveEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_RemoveAllEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveAllEntitySetElements] = new DefaultComeztierclickmocksoap_RemoveAllEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoap_RemoveAllEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse] = new DefaultComeztierclickmocksoap_RemoveAllEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetElementsFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetElements] = new DefaultComeztierclickmocksoap_GetEntitySetElementsFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetElementsResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetElementsResponse] = new DefaultComeztierclickmocksoap_GetEntitySetElementsResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetElementsSnapshotFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetElementsSnapshot] = new DefaultComeztierclickmocksoap_GetEntitySetElementsSnapshotFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetElementsSnapshotResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse] = new DefaultComeztierclickmocksoap_GetEntitySetElementsSnapshotResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntitySetUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntitySetUniqueKeys] = new DefaultComeztierclickmocksoap_SetEntitySetUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntitySetUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse] = new DefaultComeztierclickmocksoap_SetEntitySetUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetUniqueKeys] = new DefaultComeztierclickmocksoap_GetEntitySetUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse] = new DefaultComeztierclickmocksoap_GetEntitySetUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetTypeFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetType] = new DefaultComeztierclickmocksoap_GetEntitySetTypeFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntitySetTypeResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntitySetTypeResponse] = new DefaultComeztierclickmocksoap_GetEntitySetTypeResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntityTypeExtentUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeys] = new DefaultComeztierclickmocksoap_SetEntityTypeExtentUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoap_SetEntityTypeExtentUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse] = new DefaultComeztierclickmocksoap_SetEntityTypeExtentUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeExtentUniqueKeysFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeys] = new DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeExtentUniqueKeysResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse] = new DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeExtentUniqueKeysReadableFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadable] = new DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysReadableFormat {}
  implicit lazy val Comeztierclickmocksoap_GetEntityTypeExtentUniqueKeysReadableResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse] = new DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysReadableResponseFormat {}
  implicit lazy val Comeztierclickmocksoap_UnregisterAllFromEntityTypeExtentFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtent] = new DefaultComeztierclickmocksoap_UnregisterAllFromEntityTypeExtentFormat {}
  implicit lazy val Comeztierclickmocksoap_UnregisterAllFromEntityTypeExtentResponseFormat: scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse] = new DefaultComeztierclickmocksoap_UnregisterAllFromEntityTypeExtentResponseFormat {}

  def fromAnySchemaTypeHelper1(elem: scala.xml.Elem): Option[scalaxb.DataRecord[Any]] = {
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("GetUserIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetUserIDResponse](elem)))
      case (Some("LogoffResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LogoffResponse](elem)))
      case (Some("LoginAsWindowsIdentityResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse](elem)))
      case (Some("LoginResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoginResponse](elem)))
      case (Some("GetStorageListResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetStorageListResponse](elem)))
      case (Some("setEntityTypeAttributeValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse](elem)))
      case (Some("setEntityAttributeValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntityAttributeValueResponse](elem)))
      case (Some("setExtentFromSCResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetExtentFromSCResponse](elem)))
      case (Some("getExtentForSCResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetExtentForSCResponse](elem)))
      case (Some("loadAssemblyResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoadAssemblyResponse](elem)))
      case (Some("loadJavaClassResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoadJavaClassResponse](elem)))
      case (Some("getSupportedCurrencyFormatsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse](elem)))
      case (Some("getSupportedCurrenciesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSupportedCurrenciesResponse](elem)))
      case (Some("unregisterEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.UnregisterEntityByIDResponse](elem)))
      case (Some("invokeTypeMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.InvokeTypeMethodResponse](elem)))
      case (Some("invokeInstanceMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.InvokeInstanceMethodResponse](elem)))
      case (Some("triggerEventByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.TriggerEventByIDResponse](elem)))
      case (Some("interpretValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.InterpretValueResponse](elem)))
      case (Some("renderValueResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RenderValueResponse](elem)))
      case (Some("getFormattedAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetFormattedAttributeResponse](elem)))
      case (Some("setFormattedAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetFormattedAttributeResponse](elem)))
      case (Some("getAttributeEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetAttributeEntityByIDResponse](elem)))
      case (Some("setAttributeEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetAttributeEntityByIDResponse](elem)))
      case (Some("redefineEventResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEventResponse](elem)))
      case (Some("unregisterEventByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.UnregisterEventByIDResponse](elem)))
      case (Some("registerEventByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RegisterEventByIDResponse](elem)))
      case (Some("redefineEntityByID2Response"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEntityByID2Response](elem)))
      case (Some("redefineEntityByID1Response"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEntityByID1Response](elem)))
      case (Some("redefineEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEntityByIDResponse](elem)))
      case (Some("createEntityResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateEntityResponse](elem)))
      case (Some("getEntityByAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityByAttributeResponse](elem)))
      case (Some("getXmlStringsOfOidStringsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse](elem)))
      case (Some("releaseSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.ReleaseSnapshotResponse](elem)))
      case (Some("getPORefsFromSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse](elem)))
      case (Some("allEntitiesOfTypeSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse](elem)))
      case (Some("getEntityByIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityByIDResponse](elem)))
      case (Some("allEntitiesOfVersionOfTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse](elem)))
      case (Some("entitiesOfTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EntitiesOfTypeResponse](elem)))
      case (Some("allEntitiesOfTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AllEntitiesOfTypeResponse](elem)))
      case (Some("deleteEventResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEventResponse](elem)))
      case (Some("addEventResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddEventResponse](elem)))
      case (Some("deleteMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteMethodResponse](elem)))
      case (Some("addScriptMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddScriptMethodResponse](elem)))
      case (Some("redefineMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineMethodResponse](elem)))
      case (Some("addMethodResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddMethodResponse](elem)))
      case (Some("migrateAllResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.MigrateAllResponse](elem)))
      case (Some("setKeyAttributeAndMigrateResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetKeyAttributeAndMigrateResponse](elem)))
      case (Some("setKeyAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetKeyAttributeResponse](elem)))
      case (Some("redefineAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineAttributeResponse](elem)))
      case (Some("getAttributePropertyResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetAttributePropertyResponse](elem)))
      case (Some("setAttributePropertyResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetAttributePropertyResponse](elem)))
      case (Some("dropKeyFromAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DropKeyFromAttributeResponse](elem)))
      case (Some("deleteAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteAttributeResponse](elem)))
      case (Some("addAttributeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddAttributeResponse](elem)))
      case (Some("addAttributeAndVersionTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse](elem)))
      case (Some("createNewVersionOfEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse](elem)))
      case (Some("createNewEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewEntityTypeResponse](elem)))
      case (Some("deleteEntityTypeEtAlResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse](elem)))
      case (Some("deleteEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEntityTypeResponse](elem)))
      case (Some("subtypeNamesOfEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse](elem)))
      case (Some("subtypesOfEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse](elem)))
      case (Some("entityTypeHasSubtypesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EntityTypeHasSubtypesResponse](elem)))
      case (Some("getEntityTypeReadableResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeReadableResponse](elem)))
      case (Some("getEntityTypeForSourceControlResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse](elem)))
      case (Some("getEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeResponse](elem)))
      case (Some("entityTypeExistsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EntityTypeExistsResponse](elem)))
      case (Some("getTypeNamesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeNamesResponse](elem)))
      case (Some("rootEntityTypeNameResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RootEntityTypeNameResponse](elem)))
      case (Some("rootEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RootEntityTypeResponse](elem)))
      case (Some("rootEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RootEntityType](elem)))
      case (Some("rootEntityTypeName"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RootEntityTypeName](elem)))
      case (Some("getTypeNames"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeNames](elem)))
      case (Some("entityTypeExists"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EntityTypeExists](elem)))
      case (Some("getEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityType](elem)))
      case (Some("getEntityTypeForSourceControl"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeForSourceControl](elem)))
      case (Some("getEntityTypeReadable"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeReadable](elem)))
      case (Some("entityTypeHasSubtypes"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EntityTypeHasSubtypes](elem)))
      case (Some("subtypesOfEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SubtypesOfEntityType](elem)))
      case (Some("subtypeNamesOfEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SubtypeNamesOfEntityType](elem)))
      case (Some("deleteEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEntityType](elem)))
      case (Some("deleteEntityTypeEtAl"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEntityTypeEtAl](elem)))
      case (Some("createNewEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewEntityType](elem)))
      case (Some("createNewVersionOfEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewVersionOfEntityType](elem)))
      case (Some("addAttributeAndVersionType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddAttributeAndVersionType](elem)))
      case (Some("addAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddAttribute](elem)))
      case (Some("deleteAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteAttribute](elem)))
      case (Some("dropKeyFromAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DropKeyFromAttribute](elem)))
      case (Some("setAttributeProperty"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetAttributeProperty](elem)))
      case (Some("getAttributeProperty"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetAttributeProperty](elem)))
      case (Some("redefineAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineAttribute](elem)))
      case (Some("setKeyAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetKeyAttribute](elem)))
      case (Some("setKeyAttributeAndMigrate"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetKeyAttributeAndMigrate](elem)))
      case (Some("migrateAll"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.MigrateAll](elem)))
      case (Some("addMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddMethod](elem)))
      case (Some("redefineMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineMethod](elem)))
      case (Some("addScriptMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddScriptMethod](elem)))
      case (Some("deleteMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteMethod](elem)))
      case (Some("addEvent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddEvent](elem)))
      case (Some("deleteEvent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEvent](elem)))
      case (Some("allEntitiesOfType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AllEntitiesOfType](elem)))
      case (Some("entitiesOfType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EntitiesOfType](elem)))
      case (Some("allEntitiesOfVersionOfType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AllEntitiesOfVersionOfType](elem)))
      case (Some("getEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityByID](elem)))
      case (Some("allEntitiesOfTypeSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshot](elem)))
      case (Some("getPORefsFromSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetPORefsFromSnapshot](elem)))
      case (Some("releaseSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.ReleaseSnapshot](elem)))
      case (Some("getXmlStringsOfOidStrings"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetXmlStringsOfOidStrings](elem)))
      case (Some("getEntityByAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityByAttribute](elem)))
      case (Some("createEntity"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateEntity](elem)))
      case (Some("redefineEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEntityByID](elem)))
      case (Some("redefineEntityByID1"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEntityByID1](elem)))
      case (Some("redefineEntityByID2"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEntityByID2](elem)))
      case (Some("registerEventByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RegisterEventByID](elem)))
      case (Some("unregisterEventByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.UnregisterEventByID](elem)))
      case (Some("redefineEvent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RedefineEvent](elem)))
      case (Some("setAttributeEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetAttributeEntityByID](elem)))
      case (Some("getAttributeEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetAttributeEntityByID](elem)))
      case (Some("setFormattedAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetFormattedAttribute](elem)))
      case (Some("getFormattedAttribute"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetFormattedAttribute](elem)))
      case (Some("renderValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RenderValue](elem)))
      case (Some("interpretValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.InterpretValue](elem)))
      case (Some("triggerEventByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.TriggerEventByID](elem)))
      case (Some("invokeInstanceMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.InvokeInstanceMethod](elem)))
      case (Some("invokeTypeMethod"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.InvokeTypeMethod](elem)))
      case (Some("unregisterEntityByID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.UnregisterEntityByID](elem)))
      case (Some("getSupportedCurrencies"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSupportedCurrencies](elem)))
      case (Some("getSupportedCurrencyFormats"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSupportedCurrencyFormats](elem)))
      case (Some("loadJavaClass"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoadJavaClass](elem)))
      case (Some("loadAssembly"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoadAssembly](elem)))
      case (Some("getExtentForSC"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetExtentForSC](elem)))
      case (Some("setExtentFromSC"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetExtentFromSC](elem)))
      case (Some("setEntityAttributeValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntityAttributeValue](elem)))
      case (Some("setEntityTypeAttributeValue"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntityTypeAttributeValue](elem)))
      case (Some("GetStorageList"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetStorageList](elem)))

      case _ => None
    }
  }

  def fromAnySchemaTypeHelper2(elem: scala.xml.Elem): Option[scalaxb.DataRecord[Any]] = {
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Login"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.Login](elem)))
      case (Some("LoginAsWindowsIdentity"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoginAsWindowsIdentity](elem)))
      case (Some("Logoff"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.Logoff](elem)))
      case (Some("GetUserID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetUserID](elem)))
      case (Some("GetUserIDResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetUserIDResponse](elem)))
      case (Some("LogoffResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LogoffResponse](elem)))
      case (Some("LoginAsWindowsIdentityResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse](elem)))
      case (Some("LoginResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoginResponse](elem)))
      case (Some("GetStorageListResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetStorageListResponse](elem)))
      case (Some("unregisterAllFromEntityTypeExtentResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse](elem)))
      case (Some("getEntityTypeExtentUniqueKeysReadableResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse](elem)))
      case (Some("getEntityTypeExtentUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse](elem)))
      case (Some("setEntityTypeExtentUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse](elem)))
      case (Some("getEntitySetTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetTypeResponse](elem)))
      case (Some("getEntitySetUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse](elem)))
      case (Some("setEntitySetUniqueKeysResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse](elem)))
      case (Some("getEntitySetElementsSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse](elem)))
      case (Some("getEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetElementsResponse](elem)))
      case (Some("removeAllEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse](elem)))
      case (Some("removeEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RemoveEntitySetElementsResponse](elem)))
      case (Some("addEntitySetElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddEntitySetElementsResponse](elem)))
      case (Some("getEQueryReferencesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueryReferencesResponse](elem)))
      case (Some("evaluateSetAlgebraSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse](elem)))
      case (Some("evaluateSetAlgebraResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateSetAlgebraResponse](elem)))
      case (Some("getESetsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetESetsResponse](elem)))
      case (Some("getTypeCompatibleEQueriesContainingResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse](elem)))
      case (Some("getBaseTypeCompatibleEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse](elem)))
      case (Some("getTypeCompatibleEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse](elem)))
      case (Some("getTypeCompatibleSetsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse](elem)))
      case (Some("getDetailsReadableResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetDetailsReadableResponse](elem)))
      case (Some("getDetailsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetDetailsResponse](elem)))
      case (Some("getSharedValuesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSharedValuesResponse](elem)))
      case (Some("getElementsSnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetElementsSnapshotResponse](elem)))
      case (Some("getElementsResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetElementsResponse](elem)))
      case (Some("setDescriptionResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetDescriptionResponse](elem)))
      case (Some("getDescriptionResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetDescriptionResponse](elem)))
      case (Some("evaluateEQuerySnapshotResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse](elem)))
      case (Some("evaluateEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateEQueryResponse](elem)))
      case (Some("deleteEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEQueryResponse](elem)))
      case (Some("dependentEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DependentEQueriesResponse](elem)))
      case (Some("renameEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RenameEQueryResponse](elem)))
      case (Some("getEQueryParametersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueryParametersResponse](elem)))
      case (Some("getExplicitMembersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetExplicitMembersResponse](elem)))
      case (Some("removeExplicitMembersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RemoveExplicitMembersResponse](elem)))
      case (Some("addExplicitMembersResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddExplicitMembersResponse](elem)))
      case (Some("getEQueriesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueriesResponse](elem)))
      case (Some("hasEQueryNamedResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.HasEQueryNamedResponse](elem)))
      case (Some("createOrUpdateEQueryExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse](elem)))
      case (Some("createOrUpdateEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse](elem)))
      case (Some("alterEQueryExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AlterEQueryExResponse](elem)))
      case (Some("alterEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AlterEQueryResponse](elem)))
      case (Some("createParameterizedEQueryExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse](elem)))
      case (Some("createParameterizedEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateParameterizedEQueryResponse](elem)))
      case (Some("createEQueryResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateEQueryResponse](elem)))
      case (Some("getNamesOfReferencedTypesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse](elem)))
      case (Some("deleteETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteETypeResponse](elem)))
      case (Some("renameETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RenameETypeResponse](elem)))
      case (Some("getEQueryInformationForGUIResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse](elem)))
      case (Some("getSubTypeInformationForGUIResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse](elem)))
      case (Some("getETypeInformationForGUIResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetETypeInformationForGUIResponse](elem)))
      case (Some("getETypesResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetETypesResponse](elem)))
      case (Some("hasETypeNamedResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.HasETypeNamedResponse](elem)))
      case (Some("createOrUpdateETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateOrUpdateETypeResponse](elem)))
      case (Some("versionETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.VersionETypeResponse](elem)))
      case (Some("createETypeForEntityTypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse](elem)))
      case (Some("createNewETypeExResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewETypeExResponse](elem)))
      case (Some("createNewETypeResponse"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewETypeResponse](elem)))
      case (Some("createNewEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewEType](elem)))
      case (Some("createNewETypeEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateNewETypeEx](elem)))
      case (Some("createETypeForEntityType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateETypeForEntityType](elem)))
      case (Some("versionEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.VersionEType](elem)))
      case (Some("createOrUpdateEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateOrUpdateEType](elem)))
      case (Some("hasETypeNamed"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.HasETypeNamed](elem)))
      case (Some("getETypes"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetETypes](elem)))
      case (Some("getETypeInformationForGUI"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetETypeInformationForGUI](elem)))
      case (Some("getSubTypeInformationForGUI"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSubTypeInformationForGUI](elem)))
      case (Some("getEQueryInformationForGUI"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueryInformationForGUI](elem)))
      case (Some("renameEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RenameEType](elem)))
      case (Some("deleteEType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEType](elem)))
      case (Some("getNamesOfReferencedTypes"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetNamesOfReferencedTypes](elem)))
      case (Some("createEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateEQuery](elem)))
      case (Some("createParameterizedEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateParameterizedEQuery](elem)))
      case (Some("createParameterizedEQueryEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateParameterizedEQueryEx](elem)))
      case (Some("alterEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AlterEQuery](elem)))
      case (Some("alterEQueryEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AlterEQueryEx](elem)))
      case (Some("createOrUpdateEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateOrUpdateEQuery](elem)))
      case (Some("createOrUpdateEQueryEx"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.CreateOrUpdateEQueryEx](elem)))
      case (Some("hasEQueryNamed"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.HasEQueryNamed](elem)))
      case (Some("getEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueries](elem)))
      case (Some("addExplicitMembers"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddExplicitMembers](elem)))
      case (Some("removeExplicitMembers"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RemoveExplicitMembers](elem)))
      case (Some("getExplicitMembers"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetExplicitMembers](elem)))
      case (Some("getEQueryParameters"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueryParameters](elem)))
      case (Some("renameEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RenameEQuery](elem)))
      case (Some("dependentEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DependentEQueries](elem)))
      case (Some("deleteEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.DeleteEQuery](elem)))
      case (Some("evaluateEQuery"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateEQuery](elem)))
      case (Some("evaluateEQuerySnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateEQuerySnapshot](elem)))
      case (Some("getDescription"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetDescription](elem)))
      case (Some("setDescription"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetDescription](elem)))
      case (Some("getElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetElements](elem)))
      case (Some("getElementsSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetElementsSnapshot](elem)))
      case (Some("getSharedValues"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetSharedValues](elem)))
      case (Some("getDetails"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetDetails](elem)))
      case (Some("getDetailsReadable"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetDetailsReadable](elem)))
      case (Some("getTypeCompatibleSets"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeCompatibleSets](elem)))
      case (Some("getTypeCompatibleEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeCompatibleEQueries](elem)))
      case (Some("getBaseTypeCompatibleEQueries"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueries](elem)))
      case (Some("getTypeCompatibleEQueriesContaining"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContaining](elem)))
      case (Some("getESets"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetESets](elem)))
      case (Some("evaluateSetAlgebra"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateSetAlgebra](elem)))
      case (Some("evaluateSetAlgebraSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshot](elem)))
      case (Some("getEQueryReferences"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEQueryReferences](elem)))
      case (Some("addEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.AddEntitySetElements](elem)))
      case (Some("removeEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RemoveEntitySetElements](elem)))
      case (Some("removeAllEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.RemoveAllEntitySetElements](elem)))
      case (Some("getEntitySetElements"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetElements](elem)))
      case (Some("getEntitySetElementsSnapshot"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetElementsSnapshot](elem)))
      case (Some("setEntitySetUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntitySetUniqueKeys](elem)))
      case (Some("getEntitySetUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetUniqueKeys](elem)))
      case (Some("getEntitySetType"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntitySetType](elem)))
      case (Some("setEntityTypeExtentUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeys](elem)))
      case (Some("getEntityTypeExtentUniqueKeys"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeys](elem)))
      case (Some("getEntityTypeExtentUniqueKeysReadable"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadable](elem)))
      case (Some("unregisterAllFromEntityTypeExtent"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtent](elem)))
      case (Some("GetStorageList"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetStorageList](elem)))
      case (Some("Login"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.Login](elem)))
      case (Some("LoginAsWindowsIdentity"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.LoginAsWindowsIdentity](elem)))
      case (Some("Logoff"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.Logoff](elem)))
      case (Some("GetUserID"), Some("http://clickcommerce.com/Extranet/WebServices") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetUserID](elem)))
      case (Some("string"), Some("http://www.webserviceX.NET/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("GetQuote"), Some("http://www.webserviceX.NET/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetQuote](elem)))
      case (Some("GetQuoteResponse"), Some("http://www.webserviceX.NET/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.eztier.clickmock.soap.GetQuoteResponse](elem)))

      case _ => None
    }
  }


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    fromAnySchemaTypeHelper1(elem) match {
      case None => fromAnySchemaTypeHelper2(elem)
      case result => result
    }
  }

  trait DefaultComeztierclickmocksoap_RootEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RootEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RootEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RootEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RootEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RootEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RootEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RootEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RootEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RootEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.rootEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RootEntityTypeNameFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RootEntityTypeName] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RootEntityTypeName] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RootEntityTypeName(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RootEntityTypeName, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RootEntityTypeNameResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RootEntityTypeNameResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RootEntityTypeNameResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityTypeNameResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RootEntityTypeNameResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RootEntityTypeNameResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.rootEntityTypeNameResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootEntityTypeNameResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetTypeNamesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeNames] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeNames] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetTypeNames(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeNames, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetTypeNamesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeNamesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeNamesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeNamesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetTypeNamesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeNamesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeNamesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeNamesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EntityTypeExistsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EntityTypeExists] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EntityTypeExists] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.EntityTypeExists(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EntityTypeExists, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EntityTypeExistsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EntityTypeExistsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EntityTypeExistsResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeExistsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.EntityTypeExistsResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EntityTypeExistsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.entityTypeExistsResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeExistsResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeForSourceControlFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeForSourceControl] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeForSourceControl] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEntityTypeForSourceControl(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeForSourceControl, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeForSourceControlResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeForSourceControlResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeForSourceControlResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeForSourceControlResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeReadableFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeReadable] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeReadable] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "readable")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetEntityTypeReadable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeReadable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.readable, Some("http://clickcommerce.com/Extranet/WebServices"), Some("readable"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeReadableResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeReadableResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeReadableResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeReadableResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntityTypeReadableResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeReadableResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeReadableResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeReadableResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EntityTypeHasSubtypesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EntityTypeHasSubtypes] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EntityTypeHasSubtypes] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.EntityTypeHasSubtypes(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EntityTypeHasSubtypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EntityTypeHasSubtypesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EntityTypeHasSubtypesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EntityTypeHasSubtypesResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeHasSubtypesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.EntityTypeHasSubtypesResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EntityTypeHasSubtypesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.entityTypeHasSubtypesResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeHasSubtypesResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_SubtypesOfEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SubtypesOfEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SubtypesOfEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.SubtypesOfEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SubtypesOfEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SubtypesOfEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "subtypesOfEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.subtypesOfEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("subtypesOfEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SubtypeNamesOfEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SubtypeNamesOfEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SubtypeNamesOfEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.SubtypeNamesOfEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SubtypeNamesOfEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SubtypeNamesOfEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "subtypeNamesOfEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.subtypeNamesOfEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("subtypeNamesOfEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.DeleteEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEntityTypeResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DeleteEntityTypeResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.deleteEntityTypeResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteEntityTypeResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_DeleteEntityTypeEtAlFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEntityTypeEtAl] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEntityTypeEtAl] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.DeleteEntityTypeEtAl(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEntityTypeEtAl, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteEntityTypeEtAlResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateNewEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateNewEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateNewEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.CreateNewEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateNewEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateNewEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateNewEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createNewEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.CreateNewEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createNewEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createNewEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateNewVersionOfEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateNewVersionOfEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateNewVersionOfEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateEntities")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.CreateNewVersionOfEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewVersionOfEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateEntities, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateEntities"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_CreateNewVersionOfEntityTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createNewVersionOfEntityTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createNewVersionOfEntityTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createNewVersionOfEntityTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddAttributeAndVersionTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddAttributeAndVersionType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddAttributeAndVersionType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.AddAttributeAndVersionType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddAttributeAndVersionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddAttributeAndVersionTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addAttributeAndVersionTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addAttributeAndVersionTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addAttributeAndVersionTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.AddAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AddAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.DeleteAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DeleteAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DropKeyFromAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DropKeyFromAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DropKeyFromAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attrName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "dropUniqueKeys")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.DropKeyFromAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DropKeyFromAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.attrName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attrName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.dropUniqueKeys, Some("http://clickcommerce.com/Extranet/WebServices"), Some("dropUniqueKeys"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_DropKeyFromAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DropKeyFromAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DropKeyFromAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "dropKeyFromAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DropKeyFromAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DropKeyFromAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dropKeyFromAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("dropKeyFromAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetAttributePropertyFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetAttributeProperty] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetAttributeProperty] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "propertyName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.SetAttributeProperty(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetAttributeProperty, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.propertyName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("propertyName"), __scope, false) } getOrElse {Nil},
        __obj.xmlValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetAttributePropertyResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetAttributePropertyResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetAttributePropertyResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributePropertyResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.SetAttributePropertyResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetAttributePropertyResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.setAttributePropertyResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAttributePropertyResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetAttributePropertyFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetAttributeProperty] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetAttributeProperty] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "propertyName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.GetAttributeProperty(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetAttributeProperty, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.propertyName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("propertyName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetAttributePropertyResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetAttributePropertyResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetAttributePropertyResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributePropertyResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetAttributePropertyResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetAttributePropertyResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getAttributePropertyResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getAttributePropertyResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RedefineAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RedefineAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetKeyAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetKeyAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetKeyAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attrName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "isKey")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.SetKeyAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetKeyAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attrName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attrName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.isKey, Some("http://clickcommerce.com/Extranet/WebServices"), Some("isKey"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_SetKeyAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetKeyAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetKeyAttributeResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.SetKeyAttributeResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetKeyAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.setKeyAttributeResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setKeyAttributeResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_SetKeyAttributeAndMigrateFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetKeyAttributeAndMigrate] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetKeyAttributeAndMigrate] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attrName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "isKey")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.SetKeyAttributeAndMigrate(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetKeyAttributeAndMigrate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attrName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attrName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.isKey, Some("http://clickcommerce.com/Extranet/WebServices"), Some("isKey"), __scope, false),
        scalaxb.toXML[Boolean](__obj.migrate, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrate"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_SetKeyAttributeAndMigrateResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetKeyAttributeAndMigrateResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetKeyAttributeAndMigrateResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttributeAndMigrateResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.SetKeyAttributeAndMigrateResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetKeyAttributeAndMigrateResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.setKeyAttributeAndMigrateResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setKeyAttributeAndMigrateResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_MigrateAllFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.MigrateAll] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.MigrateAll] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateSubtypes")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.MigrateAll(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.MigrateAll, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateSubtypes, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateSubtypes"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_MigrateAllResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.MigrateAllResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.MigrateAllResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.MigrateAllResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.MigrateAllResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.MigrateAllResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_AddMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.AddMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AddMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RedefineMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RedefineMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddScriptMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddScriptMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddScriptMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "scriptLanguage")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodBody")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.AddScriptMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddScriptMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.scriptLanguage map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("scriptLanguage"), __scope, false) } getOrElse {Nil},
        __obj.methodBody map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodBody"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddScriptMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddScriptMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddScriptMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addScriptMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AddScriptMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddScriptMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addScriptMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addScriptMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.DeleteMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteMethodResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteMethodResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DeleteMethodResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteMethodResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteMethodResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddEventFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddEvent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddEvent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.AddEvent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddEventResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddEventResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddEventResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "addEventResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AddEventResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddEventResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.addEventResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("addEventResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteEventFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEvent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEvent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.DeleteEvent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteEventResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEventResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEventResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEventResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DeleteEventResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEventResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteEventResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteEventResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AllEntitiesOfTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AllEntitiesOfType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AllEntitiesOfType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.AllEntitiesOfType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AllEntitiesOfType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AllEntitiesOfTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AllEntitiesOfTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AllEntitiesOfTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AllEntitiesOfTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AllEntitiesOfTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.allEntitiesOfTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("allEntitiesOfTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EntitiesOfTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EntitiesOfType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EntitiesOfType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.EntitiesOfType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EntitiesOfType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EntitiesOfTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EntitiesOfTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EntitiesOfTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitiesOfTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.EntitiesOfTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EntitiesOfTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.entitiesOfTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitiesOfTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AllEntitiesOfVersionOfTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AllEntitiesOfVersionOfType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AllEntitiesOfVersionOfType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "versionId")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.AllEntitiesOfVersionOfType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AllEntitiesOfVersionOfType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.versionId, Some("http://clickcommerce.com/Extranet/WebServices"), Some("versionId"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_AllEntitiesOfVersionOfTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfVersionOfTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.allEntitiesOfVersionOfTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("allEntitiesOfVersionOfTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AllEntitiesOfTypeSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AllEntitiesOfTypeSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfTypeSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.allEntitiesOfTypeSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("allEntitiesOfTypeSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetPORefsFromSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetPORefsFromSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetPORefsFromSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "snapshotID")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "start")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "end")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.GetPORefsFromSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetPORefsFromSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.snapshotID map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("snapshotID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.start, Some("http://clickcommerce.com/Extranet/WebServices"), Some("start"), __scope, false),
        scalaxb.toXML[Int](__obj.end, Some("http://clickcommerce.com/Extranet/WebServices"), Some("end"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetPORefsFromSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getPORefsFromSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse(p1.headOption map { scalaxb.fromXML[com.eztier.clickmock.soap.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getPORefsFromSnapshotResult map { scalaxb.toXML[com.eztier.clickmock.soap.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getPORefsFromSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_ArrayOfStringFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.ArrayOfString] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    override def typeName: Option[String] = Some("ArrayOfString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.ArrayOfString] =
      phrase(safeRep(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "string")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.ArrayOfString(p1 map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }}) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.ArrayOfString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.string flatMap { scalaxb.toXML[Option[String]](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("string"), __scope, false) })

  }

  trait DefaultComeztierclickmocksoap_ReleaseSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.ReleaseSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.ReleaseSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "snapshotID")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.ReleaseSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.ReleaseSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.snapshotID map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("snapshotID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_ReleaseSnapshotResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.ReleaseSnapshotResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.ReleaseSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.ReleaseSnapshotResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.ReleaseSnapshotResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.ReleaseSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetXmlStringsOfOidStringsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetXmlStringsOfOidStrings] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetXmlStringsOfOidStrings] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStrings")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetXmlStringsOfOidStrings(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.eztier.clickmock.soap.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetXmlStringsOfOidStrings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStrings map { scalaxb.toXML[com.eztier.clickmock.soap.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStrings"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetXmlStringsOfOidStringsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getXmlStringsOfOidStringsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse(p1.headOption map { scalaxb.fromXML[com.eztier.clickmock.soap.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getXmlStringsOfOidStringsResult map { scalaxb.toXML[com.eztier.clickmock.soap.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getXmlStringsOfOidStringsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityByAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityByAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityByAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.GetEntityByAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityByAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityByAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityByAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityByAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntityByAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityByAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityByAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityByAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateEntityFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateEntity] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateEntity] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.CreateEntity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateEntityResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateEntityResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateEntityResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createEntityResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.CreateEntityResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateEntityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createEntityResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createEntityResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RedefineEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RedefineEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEntityByID1Format extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEntityByID1] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEntityByID1] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RedefineEntityByID1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEntityByID1, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEntityByID1ResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEntityByID1Response] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEntityByID1Response] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID1Result")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RedefineEntityByID1Response(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEntityByID1Response, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEntityByID1Result map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEntityByID1Result"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEntityByID2Format extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEntityByID2] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEntityByID2] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlPropertiesString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RedefineEntityByID2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEntityByID2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.xmlPropertiesString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlPropertiesString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEntityByID2ResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEntityByID2Response] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEntityByID2Response] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID2Result")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RedefineEntityByID2Response(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEntityByID2Response, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEntityByID2Result map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEntityByID2Result"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RegisterEventByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RegisterEventByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RegisterEventByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sourcePORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "targetPORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.RegisterEventByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RegisterEventByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.sourcePORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sourcePORefStr"), __scope, false) } getOrElse {Nil},
        __obj.targetPORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("targetPORefStr"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RegisterEventByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RegisterEventByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RegisterEventByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "registerEventByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RegisterEventByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RegisterEventByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.registerEventByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("registerEventByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_UnregisterEventByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.UnregisterEventByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.UnregisterEventByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sourcePORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "targetPORefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.UnregisterEventByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.UnregisterEventByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.sourcePORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sourcePORefStr"), __scope, false) } getOrElse {Nil},
        __obj.targetPORefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("targetPORefStr"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_UnregisterEventByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.UnregisterEventByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.UnregisterEventByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterEventByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.UnregisterEventByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.UnregisterEventByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.unregisterEventByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("unregisterEventByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEventFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEvent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEvent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlString")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RedefineEvent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RedefineEventResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RedefineEventResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RedefineEventResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEventResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RedefineEventResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RedefineEventResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.redefineEventResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("redefineEventResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetAttributeEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetAttributeEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetAttributeEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlAttributeValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.SetAttributeEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetAttributeEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlAttributeValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlAttributeValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetAttributeEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetAttributeEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetAttributeEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributeEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.SetAttributeEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetAttributeEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.setAttributeEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAttributeEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetAttributeEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetAttributeEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetAttributeEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetAttributeEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetAttributeEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetAttributeEntityByIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetAttributeEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetAttributeEntityByIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributeEntityByIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetAttributeEntityByIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetAttributeEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getAttributeEntityByIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getAttributeEntityByIDResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetFormattedAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetFormattedAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetFormattedAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "formattedString")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.SetFormattedAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetFormattedAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.formattedString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("formattedString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetFormattedAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetFormattedAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetFormattedAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setFormattedAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.SetFormattedAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetFormattedAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.setFormattedAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setFormattedAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetFormattedAttributeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetFormattedAttribute] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetFormattedAttribute] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetFormattedAttribute(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetFormattedAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetFormattedAttributeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetFormattedAttributeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetFormattedAttributeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getFormattedAttributeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetFormattedAttributeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetFormattedAttributeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getFormattedAttributeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getFormattedAttributeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RenderValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RenderValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RenderValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xmlValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.RenderValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RenderValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.xmlValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xmlValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RenderValueResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RenderValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RenderValueResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "renderValueResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.RenderValueResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RenderValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.renderValueResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("renderValueResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_InterpretValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.InterpretValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.InterpretValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "valueString")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.InterpretValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.InterpretValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.valueString map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("valueString"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_InterpretValueResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.InterpretValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.InterpretValueResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "interpretValueResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.InterpretValueResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.InterpretValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.interpretValueResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("interpretValueResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_TriggerEventByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.TriggerEventByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.TriggerEventByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eventName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.TriggerEventByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.TriggerEventByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.eventName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eventName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_TriggerEventByIDResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.TriggerEventByIDResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.TriggerEventByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.TriggerEventByIDResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.TriggerEventByIDResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.TriggerEventByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_InvokeInstanceMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.InvokeInstanceMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.InvokeInstanceMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "args")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.InvokeInstanceMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.eztier.clickmock.soap.ArrayOfAnyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.InvokeInstanceMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil},
        __obj.args map { scalaxb.toXML[com.eztier.clickmock.soap.ArrayOfAnyType](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("args"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_ArrayOfAnyTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.ArrayOfAnyType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    override def typeName: Option[String] = Some("ArrayOfAnyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.ArrayOfAnyType] =
      phrase(safeRep(any(_ => true)) ^^
      { case p1 =>
      com.eztier.clickmock.soap.ArrayOfAnyType(p1 map { scalaxb.fromXML[scalaxb.DataRecord[Option[Any]]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.ArrayOfAnyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.anyType flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Option[Any]]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultComeztierclickmocksoap_InvokeInstanceMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.InvokeInstanceMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.InvokeInstanceMethodResponse] =
      phrase(opt(any(_ => true)) ^^
      { case p1 =>
      com.eztier.clickmock.soap.InvokeInstanceMethodResponse(p1.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.InvokeInstanceMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.invokeInstanceMethodResult map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_InvokeTypeMethodFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.InvokeTypeMethod] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.InvokeTypeMethod] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "methodName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "args")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.InvokeTypeMethod(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.eztier.clickmock.soap.ArrayOfAnyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.InvokeTypeMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.methodName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("methodName"), __scope, false) } getOrElse {Nil},
        __obj.args map { scalaxb.toXML[com.eztier.clickmock.soap.ArrayOfAnyType](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("args"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_InvokeTypeMethodResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.InvokeTypeMethodResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.InvokeTypeMethodResponse] =
      phrase(opt(any(_ => true)) ^^
      { case p1 =>
      com.eztier.clickmock.soap.InvokeTypeMethodResponse(p1.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.InvokeTypeMethodResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.invokeTypeMethodResult map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_UnregisterEntityByIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.UnregisterEntityByID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.UnregisterEntityByID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefStr")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.UnregisterEntityByID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.UnregisterEntityByID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRefStr map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefStr"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_UnregisterEntityByIDResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterEntityByIDResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.UnregisterEntityByIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.UnregisterEntityByIDResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.UnregisterEntityByIDResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.UnregisterEntityByIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetSupportedCurrenciesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSupportedCurrencies] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSupportedCurrencies] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetSupportedCurrencies(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSupportedCurrencies, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetSupportedCurrenciesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSupportedCurrenciesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSupportedCurrenciesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrenciesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetSupportedCurrenciesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSupportedCurrenciesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSupportedCurrenciesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSupportedCurrenciesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetSupportedCurrencyFormatsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSupportedCurrencyFormats] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSupportedCurrencyFormats] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetSupportedCurrencyFormats(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSupportedCurrencyFormats, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetSupportedCurrencyFormatsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrencyFormatsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSupportedCurrencyFormatsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSupportedCurrencyFormatsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_LoadJavaClassFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.LoadJavaClass] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.LoadJavaClass] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "javaClassName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binaryClassData")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binaryClassDataLength")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "javaSource")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootPathName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replaceClassPath")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "resetStoreCache")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.eztier.clickmock.soap.LoadJavaClass(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LoadJavaClass, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.javaClassName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("javaClassName"), __scope, false) } getOrElse {Nil},
        __obj.binaryClassData map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binaryClassData"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.binaryClassDataLength, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binaryClassDataLength"), __scope, false),
        __obj.javaSource map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("javaSource"), __scope, false) } getOrElse {Nil},
        __obj.rootPathName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootPathName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replaceClassPath, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replaceClassPath"), __scope, false),
        scalaxb.toXML[Boolean](__obj.resetStoreCache, Some("http://clickcommerce.com/Extranet/WebServices"), Some("resetStoreCache"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_LoadJavaClassResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.LoadJavaClassResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.LoadJavaClassResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.LoadJavaClassResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.LoadJavaClassResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LoadJavaClassResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_LoadAssemblyFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.LoadAssembly] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.LoadAssembly] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyData")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyDataLength")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "assemblyPath")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replace")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "resetStoreCache")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.eztier.clickmock.soap.LoadAssembly(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LoadAssembly, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.assemblyName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyName"), __scope, false) } getOrElse {Nil},
        __obj.assemblyData map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyData"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.assemblyDataLength, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyDataLength"), __scope, false),
        __obj.assemblyPath map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("assemblyPath"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replace, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replace"), __scope, false),
        scalaxb.toXML[Boolean](__obj.resetStoreCache, Some("http://clickcommerce.com/Extranet/WebServices"), Some("resetStoreCache"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_LoadAssemblyResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.LoadAssemblyResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.LoadAssemblyResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.LoadAssemblyResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.LoadAssemblyResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LoadAssemblyResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetExtentForSCFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetExtentForSC] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetExtentForSC] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetExtentForSC(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetExtentForSC, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetExtentForSCResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetExtentForSCResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetExtentForSCResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getExtentForSCResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetExtentForSCResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetExtentForSCResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getExtentForSCResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getExtentForSCResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetExtentFromSCFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetExtentFromSC] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetExtentFromSC] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "xml")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.SetExtentFromSC(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetExtentFromSC, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.xml map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("xml"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetExtentFromSCResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.SetExtentFromSCResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.SetExtentFromSCResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.SetExtentFromSCResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.SetExtentFromSCResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetExtentFromSCResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_SetEntityAttributeValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetEntityAttributeValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetEntityAttributeValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "val")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.SetEntityAttributeValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntityAttributeValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.poRef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRef"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.valValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("val"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetEntityAttributeValueResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityAttributeValueResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.SetEntityAttributeValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.SetEntityAttributeValueResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.SetEntityAttributeValueResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntityAttributeValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_SetEntityTypeAttributeValueFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetEntityTypeAttributeValue] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetEntityTypeAttributeValue] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "typeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "attributeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "val")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.SetEntityTypeAttributeValue(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntityTypeAttributeValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.typeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("typeName"), __scope, false) } getOrElse {Nil},
        __obj.attributeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("attributeName"), __scope, false) } getOrElse {Nil},
        __obj.valValue map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("val"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetEntityTypeAttributeValueResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetStorageListFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.GetStorageList] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.GetStorageList] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.GetStorageList] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.GetStorageList())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetStorageList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetStorageListResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetStorageListResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetStorageListResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "GetStorageListResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetStorageListResponse(p1.headOption map { scalaxb.fromXML[com.eztier.clickmock.soap.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetStorageListResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetStorageListResult map { scalaxb.toXML[com.eztier.clickmock.soap.ArrayOfString](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("GetStorageListResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_LoginFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.Login] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.Login] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "storeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "userName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "password")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.Login(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.Login, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.storeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("storeName"), __scope, false) } getOrElse {Nil},
        __obj.userName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("userName"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("password"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_LoginResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.LoginResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.LoginResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "LoginResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.LoginResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LoginResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LoginResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("LoginResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_LoginAsWindowsIdentityFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.LoginAsWindowsIdentity] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.LoginAsWindowsIdentity] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "storeName")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.LoginAsWindowsIdentity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LoginAsWindowsIdentity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.storeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("storeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_LoginAsWindowsIdentityResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "LoginAsWindowsIdentityResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LoginAsWindowsIdentityResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("LoginAsWindowsIdentityResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_LogoffFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.Logoff] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.Logoff] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.Logoff(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.Logoff, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_LogoffResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.LogoffResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.LogoffResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.LogoffResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.LogoffResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.LogoffResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetUserIDFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetUserID] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetUserID] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetUserID(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetUserID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetUserIDResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetUserIDResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetUserIDResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "GetUserIDResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetUserIDResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetUserIDResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetUserIDResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("GetUserIDResult"), __scope, false) } getOrElse {Nil})

  }


  trait EntityServicesSoap12Bindings { this: scalaxb.SoapClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    lazy val service: com.eztier.clickmock.soap.EntityServicesSoap = new EntityServicesSoap12Binding {}
    def baseAddress = new java.net.URI("http://rsnirbwcdcdvm01.nyumc.org/ClickXWebServices/EntityManager/EntityServices.asmx")

    trait EntityServicesSoap12Binding extends com.eztier.clickmock.soap.EntityServicesSoap {
      import scalaxb.ElemName._
      def rootEntityType(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RootEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RootEntityType(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/rootEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RootEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "rootEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def rootEntityTypeName(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RootEntityTypeNameResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RootEntityTypeName(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "rootEntityTypeName", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/rootEntityTypeName"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RootEntityTypeNameResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "rootEntityTypeNameResponse").head, Nil) }, {
              case x => x
            })
      def getTypeNames(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetTypeNamesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetTypeNames(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeNames", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeNames"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetTypeNamesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeNamesResponse").head, Nil) }, {
              case x => x
            })
      def entityTypeExists(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.EntityTypeExists(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeExists", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/entityTypeExists"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.EntityTypeExistsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "entityTypeExistsResponse").head, Nil).entityTypeExistsResult }, {
              case x => x
            })
      def getEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeForSourceControl(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntityTypeForSourceControl(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeForSourceControl", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeForSourceControl"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntityTypeForSourceControlResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeForSourceControlResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeReadable(svcSessionToken: Option[String], entityTypeName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntityTypeReadableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntityTypeReadable(svcSessionToken, entityTypeName, readable), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeReadable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeReadable"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntityTypeReadableResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeReadableResponse").head, Nil) }, {
              case x => x
            })
      def entityTypeHasSubtypes(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.EntityTypeHasSubtypes(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeHasSubtypes", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/entityTypeHasSubtypes"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.EntityTypeHasSubtypesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "entityTypeHasSubtypesResponse").head, Nil).entityTypeHasSubtypesResult }, {
              case x => x
            })
      def subtypesOfEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SubtypesOfEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "subtypesOfEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/subtypesOfEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SubtypesOfEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "subtypesOfEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def subtypeNamesOfEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SubtypeNamesOfEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "subtypeNamesOfEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/subtypeNamesOfEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SubtypeNamesOfEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "subtypeNamesOfEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def deleteEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DeleteEntityType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DeleteEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEntityTypeResponse").head, Nil).deleteEntityTypeResult }, {
              case x => x
            })
      def deleteEntityTypeEtAl(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DeleteEntityTypeEtAl(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEntityTypeEtAl", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEntityTypeEtAl"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DeleteEntityTypeEtAlResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEntityTypeEtAlResponse").head, Nil) }, {
              case x => x
            })
      def createNewEntityType(svcSessionToken: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateNewEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateNewEntityType(svcSessionToken, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateNewEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def createNewVersionOfEntityType(svcSessionToken: Option[String], xmlString: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateNewVersionOfEntityType(svcSessionToken, xmlString, migrateEntities), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewVersionOfEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewVersionOfEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateNewVersionOfEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewVersionOfEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def addAttributeAndVersionType(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AddAttributeAndVersionType(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "addAttributeAndVersionType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addAttributeAndVersionType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AddAttributeAndVersionTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addAttributeAndVersionTypeResponse").head, Nil) }, {
              case x => x
            })
      def addAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AddAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AddAttribute(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "addAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AddAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addAttributeResponse").head, Nil) }, {
              case x => x
            })
      def deleteAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DeleteAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DeleteAttribute(svcSessionToken, entityTypeName, attributeName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DeleteAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteAttributeResponse").head, Nil) }, {
              case x => x
            })
      def dropKeyFromAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attrName: Option[String], dropUniqueKeys: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DropKeyFromAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DropKeyFromAttribute(svcSessionToken, entityTypeName, attrName, dropUniqueKeys), Some("http://clickcommerce.com/Extranet/WebServices"), "dropKeyFromAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/dropKeyFromAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DropKeyFromAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "dropKeyFromAttributeResponse").head, Nil) }, {
              case x => x
            })
      def setAttributeProperty(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], propertyName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetAttributePropertyResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetAttributeProperty(svcSessionToken, typeName, attributeName, propertyName, xmlValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributeProperty", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setAttributeProperty"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetAttributePropertyResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setAttributePropertyResponse").head, Nil) }, {
              case x => x
            })
      def getAttributeProperty(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], propertyName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetAttributePropertyResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetAttributeProperty(svcSessionToken, typeName, attributeName, propertyName), Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributeProperty", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getAttributeProperty"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetAttributePropertyResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getAttributePropertyResponse").head, Nil) }, {
              case x => x
            })
      def redefineAttribute(svcSessionToken: Option[String], typeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RedefineAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RedefineAttribute(svcSessionToken, typeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RedefineAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineAttributeResponse").head, Nil) }, {
              case x => x
            })
      def setKeyAttribute(svcSessionToken: Option[String], typeName: Option[String], attrName: Option[String], isKey: Boolean)(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetKeyAttribute(svcSessionToken, typeName, attrName, isKey), Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setKeyAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetKeyAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setKeyAttributeResponse").head, Nil).setKeyAttributeResult }, {
              case x => x
            })
      def setKeyAttributeAndMigrate(svcSessionToken: Option[String], typeName: Option[String], attrName: Option[String], isKey: Boolean, migrate: Boolean)(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetKeyAttributeAndMigrate(svcSessionToken, typeName, attrName, isKey, migrate), Some("http://clickcommerce.com/Extranet/WebServices"), "setKeyAttributeAndMigrate", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setKeyAttributeAndMigrate"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetKeyAttributeAndMigrateResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setKeyAttributeAndMigrateResponse").head, Nil).setKeyAttributeAndMigrateResult }, {
              case x => x
            })
      def migrateAll(svcSessionToken: Option[String], typeName: Option[String], migrateSubtypes: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.MigrateAllResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.MigrateAll(svcSessionToken, typeName, migrateSubtypes), Some("http://clickcommerce.com/Extranet/WebServices"), "migrateAll", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/migrateAll"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.MigrateAllResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "migrateAllResponse").head, Nil) }, {
              case x => x
            })
      def addMethod(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AddMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AddMethod(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "addMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AddMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addMethodResponse").head, Nil) }, {
              case x => x
            })
      def redefineMethod(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RedefineMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RedefineMethod(svcSessionToken, entityTypeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RedefineMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineMethodResponse").head, Nil) }, {
              case x => x
            })
      def addScriptMethod(svcSessionToken: Option[String], entityTypeName: Option[String], scriptLanguage: Option[String], methodBody: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AddScriptMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AddScriptMethod(svcSessionToken, entityTypeName, scriptLanguage, methodBody), Some("http://clickcommerce.com/Extranet/WebServices"), "addScriptMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addScriptMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AddScriptMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addScriptMethodResponse").head, Nil) }, {
              case x => x
            })
      def deleteMethod(svcSessionToken: Option[String], entityTypeName: Option[String], methodName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DeleteMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DeleteMethod(svcSessionToken, entityTypeName, methodName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DeleteMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteMethodResponse").head, Nil) }, {
              case x => x
            })
      def addEvent(svcSessionToken: Option[String], entityTypeName: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AddEventResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AddEvent(svcSessionToken, entityTypeName, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "addEvent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addEvent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AddEventResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addEventResponse").head, Nil) }, {
              case x => x
            })
      def deleteEvent(svcSessionToken: Option[String], entityTypeName: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DeleteEventResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DeleteEvent(svcSessionToken, entityTypeName, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEvent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEvent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DeleteEventResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEventResponse").head, Nil) }, {
              case x => x
            })
      def allEntitiesOfType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AllEntitiesOfTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AllEntitiesOfType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/allEntitiesOfType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AllEntitiesOfTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "allEntitiesOfTypeResponse").head, Nil) }, {
              case x => x
            })
      def entitiesOfType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.EntitiesOfTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.EntitiesOfType(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "entitiesOfType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/entitiesOfType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.EntitiesOfTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "entitiesOfTypeResponse").head, Nil) }, {
              case x => x
            })
      def allEntitiesOfVersionOfType(svcSessionToken: Option[String], entityTypeName: Option[String], versionId: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AllEntitiesOfVersionOfType(svcSessionToken, entityTypeName, versionId), Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfVersionOfType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/allEntitiesOfVersionOfType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AllEntitiesOfVersionOfTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "allEntitiesOfVersionOfTypeResponse").head, Nil) }, {
              case x => x
            })
      def getEntityByID(svcSessionToken: Option[String], poRefStr: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntityByID(svcSessionToken, poRefStr), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def allEntitiesOfTypeSnapshot(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshot(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "allEntitiesOfTypeSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/allEntitiesOfTypeSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AllEntitiesOfTypeSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "allEntitiesOfTypeSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getPORefsFromSnapshot(svcSessionToken: Option[String], snapshotID: Option[String], start: Int, end: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetPORefsFromSnapshot(svcSessionToken, snapshotID, start, end), Some("http://clickcommerce.com/Extranet/WebServices"), "getPORefsFromSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getPORefsFromSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetPORefsFromSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getPORefsFromSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def releaseSnapshot(svcSessionToken: Option[String], snapshotID: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.ReleaseSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.ReleaseSnapshot(svcSessionToken, snapshotID), Some("http://clickcommerce.com/Extranet/WebServices"), "releaseSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/releaseSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.ReleaseSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "releaseSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getXmlStringsOfOidStrings(svcSessionToken: Option[String], poRefStrings: Option[com.eztier.clickmock.soap.ArrayOfString])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetXmlStringsOfOidStrings(svcSessionToken, poRefStrings), Some("http://clickcommerce.com/Extranet/WebServices"), "getXmlStringsOfOidStrings", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getXmlStringsOfOidStrings"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetXmlStringsOfOidStringsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getXmlStringsOfOidStringsResponse").head, Nil) }, {
              case x => x
            })
      def getEntityByAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attributeName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntityByAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntityByAttribute(svcSessionToken, entityTypeName, attributeName, xmlValue), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityByAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityByAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntityByAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityByAttributeResponse").head, Nil) }, {
              case x => x
            })
      def createEntity(svcSessionToken: Option[String], entityTypeName: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateEntityResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateEntity(svcSessionToken, entityTypeName, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "createEntity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createEntity"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateEntityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createEntityResponse").head, Nil) }, {
              case x => x
            })
      def redefineEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RedefineEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RedefineEntityByID(svcSessionToken, poRefStr, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RedefineEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def redefineEntityByID1(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RedefineEntityByID1Response] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RedefineEntityByID1(svcSessionToken, poRefStr, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID1", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEntityByID1"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RedefineEntityByID1Response](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEntityByID1Response").head, Nil) }, {
              case x => x
            })
      def redefineEntityByID2(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RedefineEntityByID2Response] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RedefineEntityByID2(svcSessionToken, poRefStr, xmlPropertiesString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEntityByID2", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEntityByID2"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RedefineEntityByID2Response](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEntityByID2Response").head, Nil) }, {
              case x => x
            })
      def registerEventByID(svcSessionToken: Option[String], sourcePORefStr: Option[String], targetPORefStr: Option[String], eventName: Option[String], methodName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RegisterEventByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RegisterEventByID(svcSessionToken, sourcePORefStr, targetPORefStr, eventName, methodName), Some("http://clickcommerce.com/Extranet/WebServices"), "registerEventByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/registerEventByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RegisterEventByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "registerEventByIDResponse").head, Nil) }, {
              case x => x
            })
      def unregisterEventByID(svcSessionToken: Option[String], sourcePORefStr: Option[String], targetPORefStr: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.UnregisterEventByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.UnregisterEventByID(svcSessionToken, sourcePORefStr, targetPORefStr, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterEventByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/unregisterEventByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.UnregisterEventByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "unregisterEventByIDResponse").head, Nil) }, {
              case x => x
            })
      def redefineEvent(svcSessionToken: Option[String], typeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RedefineEventResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RedefineEvent(svcSessionToken, typeName, xmlString), Some("http://clickcommerce.com/Extranet/WebServices"), "redefineEvent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/redefineEvent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RedefineEventResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "redefineEventResponse").head, Nil) }, {
              case x => x
            })
      def setAttributeEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], xmlAttributeValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetAttributeEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetAttributeEntityByID(svcSessionToken, poRefStr, attributeName, xmlAttributeValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setAttributeEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setAttributeEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetAttributeEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setAttributeEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def getAttributeEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetAttributeEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetAttributeEntityByID(svcSessionToken, poRefStr, attributeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getAttributeEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getAttributeEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetAttributeEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getAttributeEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def setFormattedAttribute(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], formattedString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetFormattedAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetFormattedAttribute(svcSessionToken, poRefStr, attributeName, formattedString), Some("http://clickcommerce.com/Extranet/WebServices"), "setFormattedAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setFormattedAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetFormattedAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setFormattedAttributeResponse").head, Nil) }, {
              case x => x
            })
      def getFormattedAttribute(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetFormattedAttributeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetFormattedAttribute(svcSessionToken, poRefStr, attributeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getFormattedAttribute", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getFormattedAttribute"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetFormattedAttributeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getFormattedAttributeResponse").head, Nil) }, {
              case x => x
            })
      def renderValue(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RenderValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RenderValue(svcSessionToken, poRefStr, attributeName, xmlValue), Some("http://clickcommerce.com/Extranet/WebServices"), "renderValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/renderValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RenderValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "renderValueResponse").head, Nil) }, {
              case x => x
            })
      def interpretValue(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], valueString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.InterpretValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.InterpretValue(svcSessionToken, poRefStr, attributeName, valueString), Some("http://clickcommerce.com/Extranet/WebServices"), "interpretValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/interpretValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.InterpretValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "interpretValueResponse").head, Nil) }, {
              case x => x
            })
      def triggerEventByID(svcSessionToken: Option[String], poRefStr: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.TriggerEventByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.TriggerEventByID(svcSessionToken, poRefStr, eventName), Some("http://clickcommerce.com/Extranet/WebServices"), "triggerEventByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/triggerEventByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.TriggerEventByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "triggerEventByIDResponse").head, Nil) }, {
              case x => x
            })
      def invokeInstanceMethod(svcSessionToken: Option[String], poRefStr: Option[String], methodName: Option[String], args: Option[com.eztier.clickmock.soap.ArrayOfAnyType])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.InvokeInstanceMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.InvokeInstanceMethod(svcSessionToken, poRefStr, methodName, args), Some("http://clickcommerce.com/Extranet/WebServices"), "invokeInstanceMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/invokeInstanceMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.InvokeInstanceMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "invokeInstanceMethodResponse").head, Nil) }, {
              case x => x
            })
      def invokeTypeMethod(svcSessionToken: Option[String], entityTypeName: Option[String], methodName: Option[String], args: Option[com.eztier.clickmock.soap.ArrayOfAnyType])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.InvokeTypeMethodResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.InvokeTypeMethod(svcSessionToken, entityTypeName, methodName, args), Some("http://clickcommerce.com/Extranet/WebServices"), "invokeTypeMethod", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/invokeTypeMethod"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.InvokeTypeMethodResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "invokeTypeMethodResponse").head, Nil) }, {
              case x => x
            })
      def unregisterEntityByID(svcSessionToken: Option[String], poRefStr: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.UnregisterEntityByIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.UnregisterEntityByID(svcSessionToken, poRefStr), Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterEntityByID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/unregisterEntityByID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.UnregisterEntityByIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "unregisterEntityByIDResponse").head, Nil) }, {
              case x => x
            })
      def getSupportedCurrencies(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetSupportedCurrenciesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetSupportedCurrencies(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrencies", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSupportedCurrencies"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetSupportedCurrenciesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSupportedCurrenciesResponse").head, Nil) }, {
              case x => x
            })
      def getSupportedCurrencyFormats(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetSupportedCurrencyFormats(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getSupportedCurrencyFormats", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSupportedCurrencyFormats"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetSupportedCurrencyFormatsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSupportedCurrencyFormatsResponse").head, Nil) }, {
              case x => x
            })
      def loadJavaClass(svcSessionToken: Option[String], javaClassName: Option[String], binaryClassData: Option[String], binaryClassDataLength: Int, javaSource: Option[String], rootPathName: Option[String], replaceClassPath: Boolean, resetStoreCache: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LoadJavaClassResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.LoadJavaClass(svcSessionToken, javaClassName, binaryClassData, binaryClassDataLength, javaSource, rootPathName, replaceClassPath, resetStoreCache), Some("http://clickcommerce.com/Extranet/WebServices"), "loadJavaClass", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/loadJavaClass"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LoadJavaClassResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "loadJavaClassResponse").head, Nil) }, {
              case x => x
            })
      def loadAssembly(svcSessionToken: Option[String], assemblyName: Option[String], assemblyData: Option[String], assemblyDataLength: Int, assemblyPath: Option[String], replace: Boolean, resetStoreCache: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LoadAssemblyResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.LoadAssembly(svcSessionToken, assemblyName, assemblyData, assemblyDataLength, assemblyPath, replace, resetStoreCache), Some("http://clickcommerce.com/Extranet/WebServices"), "loadAssembly", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/loadAssembly"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LoadAssemblyResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "loadAssemblyResponse").head, Nil) }, {
              case x => x
            })
      def getExtentForSC(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetExtentForSCResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetExtentForSC(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getExtentForSC", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getExtentForSC"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetExtentForSCResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getExtentForSCResponse").head, Nil) }, {
              case x => x
            })
      def setExtentFromSC(svcSessionToken: Option[String], entityTypeName: Option[String], xml: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetExtentFromSCResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetExtentFromSC(svcSessionToken, entityTypeName, xml), Some("http://clickcommerce.com/Extranet/WebServices"), "setExtentFromSC", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setExtentFromSC"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetExtentFromSCResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setExtentFromSCResponse").head, Nil) }, {
              case x => x
            })
      def setEntityAttributeValue(svcSessionToken: Option[String], poRef: Option[String], attributeName: Option[String], valValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetEntityAttributeValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetEntityAttributeValue(svcSessionToken, poRef, attributeName, valValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntityAttributeValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntityAttributeValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetEntityAttributeValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntityAttributeValueResponse").head, Nil) }, {
              case x => x
            })
      def setEntityTypeAttributeValue(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], valValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetEntityTypeAttributeValue(svcSessionToken, typeName, attributeName, valValue), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntityTypeAttributeValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntityTypeAttributeValue"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetEntityTypeAttributeValueResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntityTypeAttributeValueResponse").head, Nil) }, {
              case x => x
            })
      def getStorageList()(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetStorageListResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetStorageList(), Some("http://clickcommerce.com/Extranet/WebServices"), "GetStorageList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetStorageList"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetStorageListResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetStorageListResponse").head, Nil) }, {
              case x => x
            })
      def login(storeName: Option[String], userName: Option[String], password: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LoginResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.Login(storeName, userName, password), Some("http://clickcommerce.com/Extranet/WebServices"), "Login", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Login"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LoginResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginResponse").head, Nil) }, {
              case x => x
            })
      def loginAsWindowsIdentity(storeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.LoginAsWindowsIdentity(storeName), Some("http://clickcommerce.com/Extranet/WebServices"), "LoginAsWindowsIdentity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/LoginAsWindowsIdentity"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginAsWindowsIdentityResponse").head, Nil) }, {
              case x => x
            })
      def logoff(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LogoffResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.Logoff(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "Logoff", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Logoff"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LogoffResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LogoffResponse").head, Nil) }, {
              case x => x
            })
      def getUserID(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetUserIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetUserID(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "GetUserID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetUserID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetUserIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetUserIDResponse").head, Nil) }, {
              case x => x
            })
    }
  }


  trait DefaultComeztierclickmocksoap_CreateNewETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateNewEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateNewEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.CreateNewEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateNewETypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewETypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.CreateNewETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.CreateNewETypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.CreateNewETypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateNewETypeExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateNewETypeEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateNewETypeEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "useKeyInformation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.CreateNewETypeEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewETypeEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.useKeyInformation, Some("http://clickcommerce.com/Extranet/WebServices"), Some("useKeyInformation"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_CreateNewETypeExResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateNewETypeExResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.CreateNewETypeExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.CreateNewETypeExResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.CreateNewETypeExResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateNewETypeExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateETypeForEntityTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateETypeForEntityType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateETypeForEntityType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.CreateETypeForEntityType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateETypeForEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateETypeForEntityTypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_VersionETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.VersionEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.VersionEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateEntities")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.VersionEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.VersionEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateEntities, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateEntities"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_VersionETypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.VersionETypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.VersionETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.VersionETypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.VersionETypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.VersionETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateOrUpdateETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateOrUpdateEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateOrUpdateEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "migrateEntities")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.CreateOrUpdateEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateOrUpdateEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.migrateEntities, Some("http://clickcommerce.com/Extranet/WebServices"), Some("migrateEntities"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_CreateOrUpdateETypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateOrUpdateETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateOrUpdateETypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateETypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.CreateOrUpdateETypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateOrUpdateETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createOrUpdateETypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createOrUpdateETypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_HasETypeNamedFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.HasETypeNamed] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.HasETypeNamed] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.HasETypeNamed(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.HasETypeNamed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_HasETypeNamedResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.HasETypeNamedResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.HasETypeNamedResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "hasETypeNamedResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.HasETypeNamedResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.HasETypeNamedResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.hasETypeNamedResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("hasETypeNamedResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetETypesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetETypes] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetETypes] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetETypes(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetETypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetETypesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetETypesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetETypesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getETypesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetETypesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetETypesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getETypesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getETypesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetETypeInformationForGUIFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetETypeInformationForGUI] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetETypeInformationForGUI] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetETypeInformationForGUI(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetETypeInformationForGUI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetETypeInformationForGUIResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetETypeInformationForGUIResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetETypeInformationForGUIResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getETypeInformationForGUIResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetETypeInformationForGUIResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetETypeInformationForGUIResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getETypeInformationForGUIResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getETypeInformationForGUIResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetSubTypeInformationForGUIFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSubTypeInformationForGUI] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSubTypeInformationForGUI] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "rootType")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetSubTypeInformationForGUI(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSubTypeInformationForGUI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.rootType map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("rootType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetSubTypeInformationForGUIResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSubTypeInformationForGUIResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSubTypeInformationForGUIResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSubTypeInformationForGUIResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEQueryInformationForGUIFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueryInformationForGUI] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueryInformationForGUI] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEQueryInformationForGUI(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueryInformationForGUI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEQueryInformationForGUIResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryInformationForGUIResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueryInformationForGUIResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueryInformationForGUIResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RenameETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RenameEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RenameEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "newETypeName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RenameEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RenameEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        __obj.newETypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("newETypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RenameETypeResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.RenameETypeResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.RenameETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.RenameETypeResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.RenameETypeResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RenameETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_DeleteETypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteSubtypes")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.DeleteEType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.deleteSubtypes, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteSubtypes"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_DeleteETypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteETypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteETypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteETypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DeleteETypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteETypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteETypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteETypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetNamesOfReferencedTypesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetNamesOfReferencedTypes] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetNamesOfReferencedTypes] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetNamesOfReferencedTypes(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetNamesOfReferencedTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetNamesOfReferencedTypesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getNamesOfReferencedTypesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getNamesOfReferencedTypesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getNamesOfReferencedTypesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.CreateEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.CreateEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.CreateEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.CreateEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateParameterizedEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateParameterizedEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateParameterizedEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "baseTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "paramName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.CreateParameterizedEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateParameterizedEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.baseTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("baseTypeName"), __scope, false) } getOrElse {Nil},
        __obj.paramName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("paramName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateParameterizedEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateParameterizedEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.CreateParameterizedEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.CreateParameterizedEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.CreateParameterizedEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateParameterizedEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateParameterizedEQueryExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateParameterizedEQueryEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateParameterizedEQueryEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "baseTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "paramName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "visibilityFlags")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.CreateParameterizedEQueryEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateParameterizedEQueryEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.baseTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("baseTypeName"), __scope, false) } getOrElse {Nil},
        __obj.paramName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("paramName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.visibilityFlags, Some("http://clickcommerce.com/Extranet/WebServices"), Some("visibilityFlags"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_CreateParameterizedEQueryExResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "createParameterizedEQueryExResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.createParameterizedEQueryExResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("createParameterizedEQueryExResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AlterEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AlterEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AlterEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.AlterEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AlterEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AlterEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.AlterEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.AlterEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.AlterEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.AlterEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AlterEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_AlterEQueryExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AlterEQueryEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AlterEQueryEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replace")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.AlterEQueryEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AlterEQueryEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replace, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replace"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_AlterEQueryExResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.AlterEQueryExResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.AlterEQueryExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.AlterEQueryExResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.AlterEQueryExResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AlterEQueryExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateOrUpdateEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateOrUpdateEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateOrUpdateEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.CreateOrUpdateEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateOrUpdateEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_CreateOrUpdateEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_CreateOrUpdateEQueryExFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.CreateOrUpdateEQueryEx] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.CreateOrUpdateEQueryEx] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "details")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "replace")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.eztier.clickmock.soap.CreateOrUpdateEQueryEx(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateOrUpdateEQueryEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.details map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("details"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.replace, Some("http://clickcommerce.com/Extranet/WebServices"), Some("replace"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_CreateOrUpdateEQueryExResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_HasEQueryNamedFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.HasEQueryNamed] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.HasEQueryNamed] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.HasEQueryNamed(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.HasEQueryNamed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_HasEQueryNamedResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.HasEQueryNamedResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.HasEQueryNamedResponse] =
      phrase((scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "hasEQueryNamedResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.HasEQueryNamedResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.HasEQueryNamedResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.hasEQueryNamedResult, Some("http://clickcommerce.com/Extranet/WebServices"), Some("hasEQueryNamedResult"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddExplicitMembersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddExplicitMembers] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddExplicitMembers] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "explicitMembers")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.AddExplicitMembers(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddExplicitMembers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.explicitMembers map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("explicitMembers"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddExplicitMembersResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.AddExplicitMembersResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.AddExplicitMembersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.AddExplicitMembersResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.AddExplicitMembersResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddExplicitMembersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_RemoveExplicitMembersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RemoveExplicitMembers] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RemoveExplicitMembers] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "explicitMembers")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RemoveExplicitMembers(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RemoveExplicitMembers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.explicitMembers map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("explicitMembers"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RemoveExplicitMembersResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveExplicitMembersResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.RemoveExplicitMembersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.RemoveExplicitMembersResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.RemoveExplicitMembersResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RemoveExplicitMembersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetExplicitMembersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetExplicitMembers] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetExplicitMembers] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetExplicitMembers(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetExplicitMembers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetExplicitMembersResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetExplicitMembersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetExplicitMembersResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getExplicitMembersResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetExplicitMembersResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetExplicitMembersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getExplicitMembersResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getExplicitMembersResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEQueryParametersFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueryParameters] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueryParameters] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetEQueryParameters(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueryParameters, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetEQueryParametersResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueryParametersResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueryParametersResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryParametersResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEQueryParametersResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueryParametersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueryParametersResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueryParametersResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RenameEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RenameEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RenameEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "newEQueryName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RenameEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RenameEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil},
        __obj.newEQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("newEQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RenameEQueryResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.RenameEQueryResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.RenameEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.RenameEQueryResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.RenameEQueryResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RenameEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_DependentEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DependentEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DependentEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.DependentEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DependentEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DependentEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DependentEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DependentEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "dependentEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DependentEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DependentEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dependentEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("dependentEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.DeleteEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_DeleteEQueryResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.DeleteEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.DeleteEQueryResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEQueryResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.DeleteEQueryResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.DeleteEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.deleteEQueryResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("deleteEQueryResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EvaluateEQueryFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateEQuery] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateEQuery] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryXML")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefsOnly")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.EvaluateEQuery(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateEQuery, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryXML"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.poRefsOnly, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefsOnly"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_EvaluateEQueryResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateEQueryResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateEQueryResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQueryResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.EvaluateEQueryResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateEQueryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateEQueryResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateEQueryResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EvaluateEQuerySnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateEQuerySnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateEQuerySnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryXML")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.EvaluateEQuerySnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateEQuerySnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryXML"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EvaluateEQuerySnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQuerySnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateEQuerySnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateEQuerySnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetDescriptionFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetDescription] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetDescription(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetDescriptionResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetDescriptionResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetDescriptionResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getDescriptionResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetDescriptionResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetDescriptionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getDescriptionResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getDescriptionResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetDescriptionFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetDescription] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "description")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.SetDescription(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetDescriptionResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.SetDescriptionResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.SetDescriptionResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.SetDescriptionResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.SetDescriptionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetDescriptionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetElementsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetElementsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getElementsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetElementsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getElementsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getElementsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetElementsSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetElementsSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetElementsSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetElementsSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetElementsSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetElementsSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetElementsSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetElementsSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getElementsSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetElementsSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetElementsSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getElementsSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getElementsSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetSharedValuesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSharedValues] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSharedValues] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetSharedValues(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSharedValues, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetSharedValuesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetSharedValuesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetSharedValuesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getSharedValuesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetSharedValuesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetSharedValuesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSharedValuesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getSharedValuesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetDetailsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetDetails] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetDetails] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetDetails(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetDetailsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetDetailsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetDetailsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getDetailsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetDetailsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetDetailsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getDetailsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getDetailsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetDetailsReadableFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetDetailsReadable] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetDetailsReadable] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eSetName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "readable")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetDetailsReadable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetDetailsReadable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eSetName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eSetName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.readable, Some("http://clickcommerce.com/Extranet/WebServices"), Some("readable"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetDetailsReadableResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetDetailsReadableResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetDetailsReadableResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getDetailsReadableResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetDetailsReadableResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetDetailsReadableResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getDetailsReadableResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getDetailsReadableResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetTypeCompatibleSetsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeCompatibleSets] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeCompatibleSets] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetTypeCompatibleSets(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeCompatibleSets, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetTypeCompatibleSetsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleSetsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeCompatibleSetsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeCompatibleSetsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeCompatibleEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeCompatibleEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "includeParameterized")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.eztier.clickmock.soap.GetTypeCompatibleEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeCompatibleEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.includeParameterized, Some("http://clickcommerce.com/Extranet/WebServices"), Some("includeParameterized"), __scope, false),
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeCompatibleEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeCompatibleEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetBaseTypeCompatibleEQueriesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueries] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueries] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueries(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetBaseTypeCompatibleEQueriesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getBaseTypeCompatibleEQueriesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getBaseTypeCompatibleEQueriesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getBaseTypeCompatibleEQueriesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesContainingFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContaining] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContaining] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityOid")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContaining(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContaining, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eTypeName"), __scope, false) } getOrElse {Nil},
        __obj.entityOid map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityOid"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetTypeCompatibleEQueriesContainingResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueriesContainingResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getTypeCompatibleEQueriesContainingResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getTypeCompatibleEQueriesContainingResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetESetsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetESets] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetESets] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "sorted")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetESets(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetESets, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.sorted, Some("http://clickcommerce.com/Extranet/WebServices"), Some("sorted"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetESetsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetESetsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetESetsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getESetsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetESetsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetESetsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getESetsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getESetsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EvaluateSetAlgebraFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateSetAlgebra] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateSetAlgebra] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAlgebra")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binding")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.EvaluateSetAlgebra(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateSetAlgebra, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.setAlgebra map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAlgebra"), __scope, false) } getOrElse {Nil},
        __obj.binding map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binding"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EvaluateSetAlgebraResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateSetAlgebraResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateSetAlgebraResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebraResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.EvaluateSetAlgebraResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateSetAlgebraResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateSetAlgebraResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateSetAlgebraResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EvaluateSetAlgebraSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "setAlgebra")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "binding")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.setAlgebra map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("setAlgebra"), __scope, false) } getOrElse {Nil},
        __obj.binding map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("binding"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_EvaluateSetAlgebraSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebraSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.evaluateSetAlgebraSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("evaluateSetAlgebraSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEQueryReferencesFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueryReferences] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueryReferences] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "eQueryName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEQueryReferences(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueryReferences, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.eQueryName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("eQueryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEQueryReferencesResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEQueryReferencesResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEQueryReferencesResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryReferencesResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEQueryReferencesResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEQueryReferencesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEQueryReferencesResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEQueryReferencesResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.AddEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.AddEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityPORefs")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.AddEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        __obj.entityPORefs map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityPORefs"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_AddEntitySetElementsResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.AddEntitySetElementsResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.AddEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.AddEntitySetElementsResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.AddEntitySetElementsResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.AddEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_RemoveEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RemoveEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RemoveEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityPORefs")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.RemoveEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RemoveEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        __obj.entityPORefs map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityPORefs"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RemoveEntitySetElementsResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveEntitySetElementsResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.RemoveEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.RemoveEntitySetElementsResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.RemoveEntitySetElementsResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RemoveEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_RemoveAllEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.RemoveAllEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.RemoveAllEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.RemoveAllEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RemoveAllEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_RemoveAllEntitySetElementsResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetEntitySetElementsFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetElements] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetElements] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "poRefsOnly")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetEntitySetElements(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetElements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.poRefsOnly, Some("http://clickcommerce.com/Extranet/WebServices"), Some("poRefsOnly"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetEntitySetElementsResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetElementsResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetElementsResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElementsResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntitySetElementsResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetElementsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetElementsResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetElementsResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntitySetElementsSnapshotFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetElementsSnapshot] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetElementsSnapshot] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEntitySetElementsSnapshot(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetElementsSnapshot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntitySetElementsSnapshotResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElementsSnapshotResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetElementsSnapshotResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetElementsSnapshotResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetEntitySetUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetEntitySetUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetEntitySetUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "uniqueKeysXML")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.SetEntitySetUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntitySetUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil},
        __obj.uniqueKeysXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("uniqueKeysXML"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetEntitySetUniqueKeysResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetEntitySetUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEntitySetUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntitySetUniqueKeysResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetUniqueKeysResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetUniqueKeysResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetUniqueKeysResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntitySetTypeFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetType] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetType] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entitySetPORef")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEntitySetType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entitySetPORef map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entitySetPORef"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntitySetTypeResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntitySetTypeResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntitySetTypeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetTypeResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntitySetTypeResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntitySetTypeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntitySetTypeResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntitySetTypeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetEntityTypeExtentUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "uniqueKeysXML")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        __obj.uniqueKeysXML map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("uniqueKeysXML"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_SetEntityTypeExtentUniqueKeysResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeys] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeys] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ^^
      { case p1 ~ p2 =>
      com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeys(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeys, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeysResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeExtentUniqueKeysResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeExtentUniqueKeysResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysReadableFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadable] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadable] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "readable")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.readable, Some("http://clickcommerce.com/Extranet/WebServices"), Some("readable"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_GetEntityTypeExtentUniqueKeysReadableResponseFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeysReadableResult")) ^^
      { case p1 =>
      com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getEntityTypeExtentUniqueKeysReadableResult map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("getEntityTypeExtentUniqueKeysReadableResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComeztierclickmocksoap_UnregisterAllFromEntityTypeExtentFormat extends scalaxb.ElemNameParser[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtent] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtent] =
      phrase(opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "svcSessionToken")) ~ 
      opt(scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "entityTypeName")) ~ 
      (scalaxb.ElemName(Some("http://clickcommerce.com/Extranet/WebServices"), "beUnsafe")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.svcSessionToken map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("svcSessionToken"), __scope, false) } getOrElse {Nil},
        __obj.entityTypeName map { scalaxb.toXML[String](_, Some("http://clickcommerce.com/Extranet/WebServices"), Some("entityTypeName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.beUnsafe, Some("http://clickcommerce.com/Extranet/WebServices"), Some("beUnsafe"), __scope, false))

  }

  trait DefaultComeztierclickmocksoap_UnregisterAllFromEntityTypeExtentResponseFormat extends scalaxb.XMLFormat[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse] with scalaxb.CanWriteChildNodes[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse] {
    val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse] = seq match {
      case node: scala.xml.Node => Right(com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


  trait EntitySetServicesSoap12Bindings { this: scalaxb.SoapClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("http://clickcommerce.com/Extranet/WebServices")
    lazy val service: com.eztier.clickmock.soap.EntitySetServicesSoap = new EntitySetServicesSoap12Binding {}
    def baseAddress = new java.net.URI("http://rsnirbwcdcdvm01.nyumc.org/ClickXWebServices/EntityManager/EntitySetServices.asmx")

    trait EntitySetServicesSoap12Binding extends com.eztier.clickmock.soap.EntitySetServicesSoap {
      import scalaxb.ElemName._
      def createNewEType(svcSessionToken: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateNewETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateNewEType(svcSessionToken, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateNewETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewETypeResponse").head, Nil) }, {
              case x => x
            })
      def createNewETypeEx(svcSessionToken: Option[String], description: Option[String], details: Option[String], useKeyInformation: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateNewETypeExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateNewETypeEx(svcSessionToken, description, details, useKeyInformation), Some("http://clickcommerce.com/Extranet/WebServices"), "createNewETypeEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createNewETypeEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateNewETypeExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createNewETypeExResponse").head, Nil) }, {
              case x => x
            })
      def createETypeForEntityType(svcSessionToken: Option[String], entityTypeName: Option[String], description: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateETypeForEntityType(svcSessionToken, entityTypeName, description), Some("http://clickcommerce.com/Extranet/WebServices"), "createETypeForEntityType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createETypeForEntityType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateETypeForEntityTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createETypeForEntityTypeResponse").head, Nil) }, {
              case x => x
            })
      def versionEType(svcSessionToken: Option[String], description: Option[String], details: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.VersionETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.VersionEType(svcSessionToken, description, details, migrateEntities), Some("http://clickcommerce.com/Extranet/WebServices"), "versionEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/versionEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.VersionETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "versionETypeResponse").head, Nil) }, {
              case x => x
            })
      def createOrUpdateEType(svcSessionToken: Option[String], description: Option[String], details: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateOrUpdateETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateOrUpdateEType(svcSessionToken, description, details, migrateEntities), Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createOrUpdateEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateOrUpdateETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createOrUpdateETypeResponse").head, Nil) }, {
              case x => x
            })
      def hasETypeNamed(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.HasETypeNamed(svcSessionToken, eTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "hasETypeNamed", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/hasETypeNamed"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.HasETypeNamedResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "hasETypeNamedResponse").head, Nil).hasETypeNamedResult }, {
              case x => x
            })
      def getETypes(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetETypesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetETypes(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getETypes", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getETypes"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetETypesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getETypesResponse").head, Nil) }, {
              case x => x
            })
      def getETypeInformationForGUI(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetETypeInformationForGUIResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetETypeInformationForGUI(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getETypeInformationForGUI", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getETypeInformationForGUI"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetETypeInformationForGUIResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getETypeInformationForGUIResponse").head, Nil) }, {
              case x => x
            })
      def getSubTypeInformationForGUI(svcSessionToken: Option[String], rootType: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetSubTypeInformationForGUI(svcSessionToken, rootType), Some("http://clickcommerce.com/Extranet/WebServices"), "getSubTypeInformationForGUI", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSubTypeInformationForGUI"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetSubTypeInformationForGUIResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSubTypeInformationForGUIResponse").head, Nil) }, {
              case x => x
            })
      def getEQueryInformationForGUI(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEQueryInformationForGUI(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryInformationForGUI", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueryInformationForGUI"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEQueryInformationForGUIResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueryInformationForGUIResponse").head, Nil) }, {
              case x => x
            })
      def renameEType(svcSessionToken: Option[String], eTypeName: Option[String], newETypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RenameETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RenameEType(svcSessionToken, eTypeName, newETypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "renameEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/renameEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RenameETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "renameETypeResponse").head, Nil) }, {
              case x => x
            })
      def deleteEType(svcSessionToken: Option[String], eTypeName: Option[String], deleteSubtypes: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DeleteETypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DeleteEType(svcSessionToken, eTypeName, deleteSubtypes), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DeleteETypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteETypeResponse").head, Nil) }, {
              case x => x
            })
      def getNamesOfReferencedTypes(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetNamesOfReferencedTypes(svcSessionToken, eTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getNamesOfReferencedTypes", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getNamesOfReferencedTypes"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetNamesOfReferencedTypesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getNamesOfReferencedTypesResponse").head, Nil) }, {
              case x => x
            })
      def createEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateEQuery(svcSessionToken, eQueryName, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "createEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createEQueryResponse").head, Nil) }, {
              case x => x
            })
      def createParameterizedEQuery(svcSessionToken: Option[String], eQueryName: Option[String], baseTypeName: Option[String], paramName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateParameterizedEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateParameterizedEQuery(svcSessionToken, eQueryName, baseTypeName, paramName), Some("http://clickcommerce.com/Extranet/WebServices"), "createParameterizedEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createParameterizedEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateParameterizedEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createParameterizedEQueryResponse").head, Nil) }, {
              case x => x
            })
      def createParameterizedEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], baseTypeName: Option[String], paramName: Option[String], visibilityFlags: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateParameterizedEQueryEx(svcSessionToken, eQueryName, baseTypeName, paramName, visibilityFlags), Some("http://clickcommerce.com/Extranet/WebServices"), "createParameterizedEQueryEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createParameterizedEQueryEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateParameterizedEQueryExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createParameterizedEQueryExResponse").head, Nil) }, {
              case x => x
            })
      def alterEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AlterEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AlterEQuery(svcSessionToken, eQueryName, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "alterEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/alterEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AlterEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "alterEQueryResponse").head, Nil) }, {
              case x => x
            })
      def alterEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String], replace: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AlterEQueryExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AlterEQueryEx(svcSessionToken, eQueryName, description, details, replace), Some("http://clickcommerce.com/Extranet/WebServices"), "alterEQueryEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/alterEQueryEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AlterEQueryExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "alterEQueryExResponse").head, Nil) }, {
              case x => x
            })
      def createOrUpdateEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateOrUpdateEQuery(svcSessionToken, eQueryName, description, details), Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createOrUpdateEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateOrUpdateEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createOrUpdateEQueryResponse").head, Nil) }, {
              case x => x
            })
      def createOrUpdateEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String], replace: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.CreateOrUpdateEQueryEx(svcSessionToken, eQueryName, description, details, replace), Some("http://clickcommerce.com/Extranet/WebServices"), "createOrUpdateEQueryEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/createOrUpdateEQueryEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.CreateOrUpdateEQueryExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createOrUpdateEQueryExResponse").head, Nil) }, {
              case x => x
            })
      def hasEQueryNamed(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.HasEQueryNamed(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "hasEQueryNamed", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/hasEQueryNamed"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.HasEQueryNamedResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "hasEQueryNamedResponse").head, Nil).hasEQueryNamedResult }, {
              case x => x
            })
      def getEQueries(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEQueries(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def addExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String], explicitMembers: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AddExplicitMembersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AddExplicitMembers(svcSessionToken, eQueryName, explicitMembers), Some("http://clickcommerce.com/Extranet/WebServices"), "addExplicitMembers", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addExplicitMembers"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AddExplicitMembersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addExplicitMembersResponse").head, Nil) }, {
              case x => x
            })
      def removeExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String], explicitMembers: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RemoveExplicitMembersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RemoveExplicitMembers(svcSessionToken, eQueryName, explicitMembers), Some("http://clickcommerce.com/Extranet/WebServices"), "removeExplicitMembers", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/removeExplicitMembers"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RemoveExplicitMembersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "removeExplicitMembersResponse").head, Nil) }, {
              case x => x
            })
      def getExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetExplicitMembersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetExplicitMembers(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "getExplicitMembers", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getExplicitMembers"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetExplicitMembersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getExplicitMembersResponse").head, Nil) }, {
              case x => x
            })
      def getEQueryParameters(svcSessionToken: Option[String], eQueryName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEQueryParametersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEQueryParameters(svcSessionToken, eQueryName, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryParameters", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueryParameters"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEQueryParametersResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueryParametersResponse").head, Nil) }, {
              case x => x
            })
      def renameEQuery(svcSessionToken: Option[String], eQueryName: Option[String], newEQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RenameEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RenameEQuery(svcSessionToken, eQueryName, newEQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "renameEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/renameEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RenameEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "renameEQueryResponse").head, Nil) }, {
              case x => x
            })
      def dependentEQueries(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DependentEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DependentEQueries(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "dependentEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/dependentEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DependentEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "dependentEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def deleteEQuery(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.DeleteEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.DeleteEQuery(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "deleteEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/deleteEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.DeleteEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "deleteEQueryResponse").head, Nil) }, {
              case x => x
            })
      def evaluateEQuery(svcSessionToken: Option[String], eQueryXML: Option[String], poRefsOnly: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.EvaluateEQueryResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.EvaluateEQuery(svcSessionToken, eQueryXML, poRefsOnly), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQuery", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateEQuery"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.EvaluateEQueryResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateEQueryResponse").head, Nil) }, {
              case x => x
            })
      def evaluateEQuerySnapshot(svcSessionToken: Option[String], eQueryXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.EvaluateEQuerySnapshot(svcSessionToken, eQueryXML), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateEQuerySnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateEQuerySnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.EvaluateEQuerySnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateEQuerySnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getDescription(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetDescriptionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetDescription(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getDescription", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getDescription"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetDescriptionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getDescriptionResponse").head, Nil) }, {
              case x => x
            })
      def setDescription(svcSessionToken: Option[String], eSetName: Option[String], description: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetDescriptionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetDescription(svcSessionToken, eSetName, description), Some("http://clickcommerce.com/Extranet/WebServices"), "setDescription", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setDescription"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetDescriptionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setDescriptionResponse").head, Nil) }, {
              case x => x
            })
      def getElements(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetElements(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getElementsResponse").head, Nil) }, {
              case x => x
            })
      def getElementsSnapshot(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetElementsSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetElementsSnapshot(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getElementsSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getElementsSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetElementsSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getElementsSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getSharedValues(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetSharedValuesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetSharedValues(svcSessionToken, eTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getSharedValues", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getSharedValues"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetSharedValuesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSharedValuesResponse").head, Nil) }, {
              case x => x
            })
      def getDetails(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetDetailsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetDetails(svcSessionToken, eSetName), Some("http://clickcommerce.com/Extranet/WebServices"), "getDetails", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getDetails"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetDetailsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getDetailsResponse").head, Nil) }, {
              case x => x
            })
      def getDetailsReadable(svcSessionToken: Option[String], eSetName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetDetailsReadableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetDetailsReadable(svcSessionToken, eSetName, readable), Some("http://clickcommerce.com/Extranet/WebServices"), "getDetailsReadable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getDetailsReadable"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetDetailsReadableResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getDetailsReadableResponse").head, Nil) }, {
              case x => x
            })
      def getTypeCompatibleSets(svcSessionToken: Option[String], eTypeName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetTypeCompatibleSets(svcSessionToken, eTypeName, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleSets", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeCompatibleSets"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetTypeCompatibleSetsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeCompatibleSetsResponse").head, Nil) }, {
              case x => x
            })
      def getTypeCompatibleEQueries(svcSessionToken: Option[String], eTypeName: Option[String], includeParameterized: Boolean, sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetTypeCompatibleEQueries(svcSessionToken, eTypeName, includeParameterized, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeCompatibleEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeCompatibleEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def getBaseTypeCompatibleEQueries(svcSessionToken: Option[String], eTypeName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueries(svcSessionToken, eTypeName, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getBaseTypeCompatibleEQueries", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getBaseTypeCompatibleEQueries"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetBaseTypeCompatibleEQueriesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getBaseTypeCompatibleEQueriesResponse").head, Nil) }, {
              case x => x
            })
      def getTypeCompatibleEQueriesContaining(svcSessionToken: Option[String], eTypeName: Option[String], entityOid: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContaining(svcSessionToken, eTypeName, entityOid), Some("http://clickcommerce.com/Extranet/WebServices"), "getTypeCompatibleEQueriesContaining", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getTypeCompatibleEQueriesContaining"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetTypeCompatibleEQueriesContainingResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getTypeCompatibleEQueriesContainingResponse").head, Nil) }, {
              case x => x
            })
      def getESets(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetESetsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetESets(svcSessionToken, sorted), Some("http://clickcommerce.com/Extranet/WebServices"), "getESets", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getESets"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetESetsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getESetsResponse").head, Nil) }, {
              case x => x
            })
      def evaluateSetAlgebra(svcSessionToken: Option[String], setAlgebra: Option[String], binding: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.EvaluateSetAlgebraResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.EvaluateSetAlgebra(svcSessionToken, setAlgebra, binding), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebra", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateSetAlgebra"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.EvaluateSetAlgebraResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateSetAlgebraResponse").head, Nil) }, {
              case x => x
            })
      def evaluateSetAlgebraSnapshot(svcSessionToken: Option[String], setAlgebra: Option[String], binding: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshot(svcSessionToken, setAlgebra, binding), Some("http://clickcommerce.com/Extranet/WebServices"), "evaluateSetAlgebraSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/evaluateSetAlgebraSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.EvaluateSetAlgebraSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "evaluateSetAlgebraSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def getEQueryReferences(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEQueryReferencesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEQueryReferences(svcSessionToken, eQueryName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEQueryReferences", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEQueryReferences"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEQueryReferencesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEQueryReferencesResponse").head, Nil) }, {
              case x => x
            })
      def addEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], entityPORefs: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.AddEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.AddEntitySetElements(svcSessionToken, entitySetPORef, entityPORefs), Some("http://clickcommerce.com/Extranet/WebServices"), "addEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/addEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.AddEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "addEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def removeEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], entityPORefs: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RemoveEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RemoveEntitySetElements(svcSessionToken, entitySetPORef, entityPORefs), Some("http://clickcommerce.com/Extranet/WebServices"), "removeEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/removeEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RemoveEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "removeEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def removeAllEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.RemoveAllEntitySetElements(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "removeAllEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/removeAllEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.RemoveAllEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "removeAllEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], poRefsOnly: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntitySetElementsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntitySetElements(svcSessionToken, entitySetPORef, poRefsOnly), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElements", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetElements"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntitySetElementsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetElementsResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetElementsSnapshot(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntitySetElementsSnapshot(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetElementsSnapshot", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetElementsSnapshot"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntitySetElementsSnapshotResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetElementsSnapshotResponse").head, Nil) }, {
              case x => x
            })
      def setEntitySetUniqueKeys(svcSessionToken: Option[String], entitySetPORef: Option[String], uniqueKeysXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetEntitySetUniqueKeys(svcSessionToken, entitySetPORef, uniqueKeysXML), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntitySetUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntitySetUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetEntitySetUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntitySetUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetUniqueKeys(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntitySetUniqueKeys(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntitySetUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntitySetType(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntitySetTypeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntitySetType(svcSessionToken, entitySetPORef), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntitySetType", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntitySetType"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntitySetTypeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntitySetTypeResponse").head, Nil) }, {
              case x => x
            })
      def setEntityTypeExtentUniqueKeys(svcSessionToken: Option[String], entityTypeName: Option[String], uniqueKeysXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeys(svcSessionToken, entityTypeName, uniqueKeysXML), Some("http://clickcommerce.com/Extranet/WebServices"), "setEntityTypeExtentUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/setEntityTypeExtentUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.SetEntityTypeExtentUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "setEntityTypeExtentUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeExtentUniqueKeys(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeys(svcSessionToken, entityTypeName), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeys", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeExtentUniqueKeys"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeExtentUniqueKeysResponse").head, Nil) }, {
              case x => x
            })
      def getEntityTypeExtentUniqueKeysReadable(svcSessionToken: Option[String], entityTypeName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadable(svcSessionToken, entityTypeName, readable), Some("http://clickcommerce.com/Extranet/WebServices"), "getEntityTypeExtentUniqueKeysReadable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/getEntityTypeExtentUniqueKeysReadable"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetEntityTypeExtentUniqueKeysReadableResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getEntityTypeExtentUniqueKeysReadableResponse").head, Nil) }, {
              case x => x
            })
      def unregisterAllFromEntityTypeExtent(svcSessionToken: Option[String], entityTypeName: Option[String], beUnsafe: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtent(svcSessionToken, entityTypeName, beUnsafe), Some("http://clickcommerce.com/Extranet/WebServices"), "unregisterAllFromEntityTypeExtent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/unregisterAllFromEntityTypeExtent"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.UnregisterAllFromEntityTypeExtentResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "unregisterAllFromEntityTypeExtentResponse").head, Nil) }, {
              case x => x
            })
      def getStorageList()(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetStorageListResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetStorageList(), Some("http://clickcommerce.com/Extranet/WebServices"), "GetStorageList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetStorageList"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetStorageListResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetStorageListResponse").head, Nil) }, {
              case x => x
            })
      def login(storeName: Option[String], userName: Option[String], password: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LoginResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.Login(storeName, userName, password), Some("http://clickcommerce.com/Extranet/WebServices"), "Login", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Login"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LoginResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginResponse").head, Nil) }, {
              case x => x
            })
      def loginAsWindowsIdentity(storeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.LoginAsWindowsIdentity(storeName), Some("http://clickcommerce.com/Extranet/WebServices"), "LoginAsWindowsIdentity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/LoginAsWindowsIdentity"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LoginAsWindowsIdentityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoginAsWindowsIdentityResponse").head, Nil) }, {
              case x => x
            })
      def logoff(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.LogoffResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.Logoff(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "Logoff", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/Logoff"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.LogoffResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LogoffResponse").head, Nil) }, {
              case x => x
            })
      def getUserID(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.GetUserIDResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.eztier.clickmock.soap.GetUserID(svcSessionToken), Some("http://clickcommerce.com/Extranet/WebServices"), "GetUserID", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://clickcommerce.com/Extranet/WebServices/GetUserID"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.eztier.clickmock.soap.GetUserIDResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetUserIDResponse").head, Nil) }, {
              case x => x
            })
    }
  }

}

