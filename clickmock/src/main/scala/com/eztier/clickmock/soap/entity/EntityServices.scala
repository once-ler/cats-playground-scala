// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.eztier.clickmock.soap.entity


import scala.concurrent.{ Future, ExecutionContext }


trait EntityServicesSoap {
  def rootEntityType(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RootEntityTypeResponse]
  def rootEntityTypeName(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RootEntityTypeNameResponse]
  def getTypeNames(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetTypeNamesResponse]
  def entityTypeExists(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean]
  def getEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetEntityTypeResponse]
  def getEntityTypeForSourceControl(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetEntityTypeForSourceControlResponse]
  def getEntityTypeReadable(svcSessionToken: Option[String], entityTypeName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetEntityTypeReadableResponse]
  def entityTypeHasSubtypes(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean]
  def subtypesOfEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SubtypesOfEntityTypeResponse]
  def subtypeNamesOfEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SubtypeNamesOfEntityTypeResponse]
  def deleteEntityType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean]
  def deleteEntityTypeEtAl(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.DeleteEntityTypeEtAlResponse]
  def createNewEntityType(svcSessionToken: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.CreateNewEntityTypeResponse]
  def createNewVersionOfEntityType(svcSessionToken: Option[String], xmlString: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.CreateNewVersionOfEntityTypeResponse]
  def addAttributeAndVersionType(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AddAttributeAndVersionTypeResponse]
  def addAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AddAttributeResponse]
  def deleteAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.DeleteAttributeResponse]
  def dropKeyFromAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attrName: Option[String], dropUniqueKeys: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.DropKeyFromAttributeResponse]
  def setAttributeProperty(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], propertyName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SetAttributePropertyResponse]
  def getAttributeProperty(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], propertyName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetAttributePropertyResponse]
  def redefineAttribute(svcSessionToken: Option[String], typeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RedefineAttributeResponse]
  def setKeyAttribute(svcSessionToken: Option[String], typeName: Option[String], attrName: Option[String], isKey: Boolean)(implicit ec: ExecutionContext): Future[Boolean]
  def setKeyAttributeAndMigrate(svcSessionToken: Option[String], typeName: Option[String], attrName: Option[String], isKey: Boolean, migrate: Boolean)(implicit ec: ExecutionContext): Future[Boolean]
  def migrateAll(svcSessionToken: Option[String], typeName: Option[String], migrateSubtypes: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.MigrateAllResponse]
  def addMethod(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AddMethodResponse]
  def redefineMethod(svcSessionToken: Option[String], entityTypeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RedefineMethodResponse]
  def addScriptMethod(svcSessionToken: Option[String], entityTypeName: Option[String], scriptLanguage: Option[String], methodBody: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AddScriptMethodResponse]
  def deleteMethod(svcSessionToken: Option[String], entityTypeName: Option[String], methodName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.DeleteMethodResponse]
  def addEvent(svcSessionToken: Option[String], entityTypeName: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AddEventResponse]
  def deleteEvent(svcSessionToken: Option[String], entityTypeName: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.DeleteEventResponse]
  def allEntitiesOfType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AllEntitiesOfTypeResponse]
  def entitiesOfType(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.EntitiesOfTypeResponse]
  def allEntitiesOfVersionOfType(svcSessionToken: Option[String], entityTypeName: Option[String], versionId: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AllEntitiesOfVersionOfTypeResponse]
  def getEntityByID(svcSessionToken: Option[String], poRefStr: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetEntityByIDResponse]
  def allEntitiesOfTypeSnapshot(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.AllEntitiesOfTypeSnapshotResponse]
  def getPORefsFromSnapshot(svcSessionToken: Option[String], snapshotID: Option[String], start: Int, end: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetPORefsFromSnapshotResponse]
  def releaseSnapshot(svcSessionToken: Option[String], snapshotID: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.ReleaseSnapshotResponse]
  def getXmlStringsOfOidStrings(svcSessionToken: Option[String], poRefStrings: Option[com.eztier.clickmock.soap.entity.ArrayOfString])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetXmlStringsOfOidStringsResponse]
  def getEntityByAttribute(svcSessionToken: Option[String], entityTypeName: Option[String], attributeName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetEntityByAttributeResponse]
  def createEntity(svcSessionToken: Option[String], entityTypeName: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.CreateEntityResponse]
  def redefineEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RedefineEntityByIDResponse]
  def redefineEntityByID1(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RedefineEntityByID1Response]
  def redefineEntityByID2(svcSessionToken: Option[String], poRefStr: Option[String], xmlPropertiesString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RedefineEntityByID2Response]
  def registerEventByID(svcSessionToken: Option[String], sourcePORefStr: Option[String], targetPORefStr: Option[String], eventName: Option[String], methodName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RegisterEventByIDResponse]
  def unregisterEventByID(svcSessionToken: Option[String], sourcePORefStr: Option[String], targetPORefStr: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.UnregisterEventByIDResponse]
  def redefineEvent(svcSessionToken: Option[String], typeName: Option[String], xmlString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RedefineEventResponse]
  def setAttributeEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], xmlAttributeValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SetAttributeEntityByIDResponse]
  def getAttributeEntityByID(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetAttributeEntityByIDResponse]
  def setFormattedAttribute(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], formattedString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SetFormattedAttributeResponse]
  def getFormattedAttribute(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetFormattedAttributeResponse]
  def renderValue(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], xmlValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.RenderValueResponse]
  def interpretValue(svcSessionToken: Option[String], poRefStr: Option[String], attributeName: Option[String], valueString: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.InterpretValueResponse]
  def triggerEventByID(svcSessionToken: Option[String], poRefStr: Option[String], eventName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.TriggerEventByIDResponse]
  def invokeInstanceMethod(svcSessionToken: Option[String], poRefStr: Option[String], methodName: Option[String], args: Option[com.eztier.clickmock.soap.entity.ArrayOfAnyType])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.InvokeInstanceMethodResponse]
  def invokeTypeMethod(svcSessionToken: Option[String], entityTypeName: Option[String], methodName: Option[String], args: Option[com.eztier.clickmock.soap.entity.ArrayOfAnyType])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.InvokeTypeMethodResponse]
  def unregisterEntityByID(svcSessionToken: Option[String], poRefStr: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.UnregisterEntityByIDResponse]
  def getSupportedCurrencies(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetSupportedCurrenciesResponse]
  def getSupportedCurrencyFormats(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetSupportedCurrencyFormatsResponse]
  def loadJavaClass(svcSessionToken: Option[String], javaClassName: Option[String], binaryClassData: Option[String], binaryClassDataLength: Int, javaSource: Option[String], rootPathName: Option[String], replaceClassPath: Boolean, resetStoreCache: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.LoadJavaClassResponse]
  def loadAssembly(svcSessionToken: Option[String], assemblyName: Option[String], assemblyData: Option[String], assemblyDataLength: Int, assemblyPath: Option[String], replace: Boolean, resetStoreCache: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.LoadAssemblyResponse]
  def getExtentForSC(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetExtentForSCResponse]
  def setExtentFromSC(svcSessionToken: Option[String], entityTypeName: Option[String], xml: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SetExtentFromSCResponse]
  def setEntityAttributeValue(svcSessionToken: Option[String], poRef: Option[String], attributeName: Option[String], valValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SetEntityAttributeValueResponse]
  def setEntityTypeAttributeValue(svcSessionToken: Option[String], typeName: Option[String], attributeName: Option[String], valValue: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.SetEntityTypeAttributeValueResponse]
  def getStorageList()(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetStorageListResponse]
  def login(storeName: Option[String], userName: Option[String], password: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.LoginResponse]
  def loginAsWindowsIdentity(storeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.LoginAsWindowsIdentityResponse]
  def logoff(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.LogoffResponse]
  def getUserID(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entity.GetUserIDResponse]
}




