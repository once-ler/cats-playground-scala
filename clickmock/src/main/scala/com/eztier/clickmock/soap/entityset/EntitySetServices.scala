// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.eztier.clickmock.soap.entityset


import scala.concurrent.{ Future, ExecutionContext }


trait EntitySetServicesSoap {
  def createNewEType(svcSessionToken: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateNewETypeResponse]
  def createNewETypeEx(svcSessionToken: Option[String], description: Option[String], details: Option[String], useKeyInformation: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateNewETypeExResponse]
  def createETypeForEntityType(svcSessionToken: Option[String], entityTypeName: Option[String], description: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateETypeForEntityTypeResponse]
  def versionEType(svcSessionToken: Option[String], description: Option[String], details: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.VersionETypeResponse]
  def createOrUpdateEType(svcSessionToken: Option[String], description: Option[String], details: Option[String], migrateEntities: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateOrUpdateETypeResponse]
  def hasETypeNamed(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[Boolean]
  def getETypes(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetETypesResponse]
  def getETypeInformationForGUI(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetETypeInformationForGUIResponse]
  def getSubTypeInformationForGUI(svcSessionToken: Option[String], rootType: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetSubTypeInformationForGUIResponse]
  def getEQueryInformationForGUI(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueryInformationForGUIResponse]
  def renameEType(svcSessionToken: Option[String], eTypeName: Option[String], newETypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RenameETypeResponse]
  def deleteEType(svcSessionToken: Option[String], eTypeName: Option[String], deleteSubtypes: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.DeleteETypeResponse]
  def getNamesOfReferencedTypes(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetNamesOfReferencedTypesResponse]
  def createEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateEQueryResponse]
  def createParameterizedEQuery(svcSessionToken: Option[String], eQueryName: Option[String], baseTypeName: Option[String], paramName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryResponse]
  def createParameterizedEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], baseTypeName: Option[String], paramName: Option[String], visibilityFlags: Int)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateParameterizedEQueryExResponse]
  def alterEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AlterEQueryResponse]
  def alterEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String], replace: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AlterEQueryExResponse]
  def createOrUpdateEQuery(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryResponse]
  def createOrUpdateEQueryEx(svcSessionToken: Option[String], eQueryName: Option[String], description: Option[String], details: Option[String], replace: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.CreateOrUpdateEQueryExResponse]
  def hasEQueryNamed(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[Boolean]
  def getEQueries(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueriesResponse]
  def addExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String], explicitMembers: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AddExplicitMembersResponse]
  def removeExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String], explicitMembers: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RemoveExplicitMembersResponse]
  def getExplicitMembers(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetExplicitMembersResponse]
  def getEQueryParameters(svcSessionToken: Option[String], eQueryName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueryParametersResponse]
  def renameEQuery(svcSessionToken: Option[String], eQueryName: Option[String], newEQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RenameEQueryResponse]
  def dependentEQueries(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.DependentEQueriesResponse]
  def deleteEQuery(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.DeleteEQueryResponse]
  def evaluateEQuery(svcSessionToken: Option[String], eQueryXML: Option[String], poRefsOnly: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateEQueryResponse]
  def evaluateEQuerySnapshot(svcSessionToken: Option[String], eQueryXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateEQuerySnapshotResponse]
  def getDescription(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetDescriptionResponse]
  def setDescription(svcSessionToken: Option[String], eSetName: Option[String], description: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.SetDescriptionResponse]
  def getElements(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetElementsResponse]
  def getElementsSnapshot(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetElementsSnapshotResponse]
  def getSharedValues(svcSessionToken: Option[String], eTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetSharedValuesResponse]
  def getDetails(svcSessionToken: Option[String], eSetName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetDetailsResponse]
  def getDetailsReadable(svcSessionToken: Option[String], eSetName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetDetailsReadableResponse]
  def getTypeCompatibleSets(svcSessionToken: Option[String], eTypeName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetTypeCompatibleSetsResponse]
  def getTypeCompatibleEQueries(svcSessionToken: Option[String], eTypeName: Option[String], includeParameterized: Boolean, sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesResponse]
  def getBaseTypeCompatibleEQueries(svcSessionToken: Option[String], eTypeName: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetBaseTypeCompatibleEQueriesResponse]
  def getTypeCompatibleEQueriesContaining(svcSessionToken: Option[String], eTypeName: Option[String], entityOid: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetTypeCompatibleEQueriesContainingResponse]
  def getESets(svcSessionToken: Option[String], sorted: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetESetsResponse]
  def evaluateSetAlgebra(svcSessionToken: Option[String], setAlgebra: Option[String], binding: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraResponse]
  def evaluateSetAlgebraSnapshot(svcSessionToken: Option[String], setAlgebra: Option[String], binding: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.EvaluateSetAlgebraSnapshotResponse]
  def getEQueryReferences(svcSessionToken: Option[String], eQueryName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEQueryReferencesResponse]
  def addEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], entityPORefs: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.AddEntitySetElementsResponse]
  def removeEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], entityPORefs: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RemoveEntitySetElementsResponse]
  def removeAllEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.RemoveAllEntitySetElementsResponse]
  def getEntitySetElements(svcSessionToken: Option[String], entitySetPORef: Option[String], poRefsOnly: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetElementsResponse]
  def getEntitySetElementsSnapshot(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetElementsSnapshotResponse]
  def setEntitySetUniqueKeys(svcSessionToken: Option[String], entitySetPORef: Option[String], uniqueKeysXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.SetEntitySetUniqueKeysResponse]
  def getEntitySetUniqueKeys(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetUniqueKeysResponse]
  def getEntitySetType(svcSessionToken: Option[String], entitySetPORef: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntitySetTypeResponse]
  def setEntityTypeExtentUniqueKeys(svcSessionToken: Option[String], entityTypeName: Option[String], uniqueKeysXML: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.SetEntityTypeExtentUniqueKeysResponse]
  def getEntityTypeExtentUniqueKeys(svcSessionToken: Option[String], entityTypeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysResponse]
  def getEntityTypeExtentUniqueKeysReadable(svcSessionToken: Option[String], entityTypeName: Option[String], readable: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetEntityTypeExtentUniqueKeysReadableResponse]
  def unregisterAllFromEntityTypeExtent(svcSessionToken: Option[String], entityTypeName: Option[String], beUnsafe: Boolean)(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.UnregisterAllFromEntityTypeExtentResponse]
  def getStorageList()(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetStorageListResponse]
  def login(storeName: Option[String], userName: Option[String], password: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.LoginResponse]
  def loginAsWindowsIdentity(storeName: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.LoginAsWindowsIdentityResponse]
  def logoff(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.LogoffResponse]
  def getUserID(svcSessionToken: Option[String])(implicit ec: ExecutionContext): Future[com.eztier.clickmock.soap.entityset.GetUserIDResponse]
}




